<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2022-2025 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_Template $this */
?>
<script type="text/javascript">
    /**
     * Name and ID for iframe for data POST-ing.
     *
     * @var string
     */
    varienForm.prototype.ifrElemName = 'import_post_target_frame';

    /**
     * Post form data to dynamic iframe.
     *
     * @param string newActionUrl OPTIONAL Change form action to this if specified
     * @return void
     */
    varienForm.prototype.postToFrame = function(newActionUrl) {
        if (this.validate()) {
            // create dynamic frame
            if (!document.getElementById(this.ifrElemName)) {
                const htmlBody = document.getElementById('html-body');
                if (htmlBody) {
                    const iframe = document.createElement('iframe');
                    iframe.name = this.ifrElemName;
                    iframe.id = this.ifrElemName;
                    iframe.style.display = 'none';
                    htmlBody.appendChild(iframe);
                }
            }

            // show mask
            if (typeof showLoader === 'function') {
                showLoader();
            }

            // temporary set new target and submit form
            const formElem = document.getElementById(this.formId);
            if (formElem) {
                const oldTarget = formElem.target;
                const oldAction = formElem.action;

                formElem.target = this.ifrElemName;

                if (newActionUrl) {
                    formElem.action = newActionUrl;
                }
                formElem.action += (formElem.action.lastIndexOf('?') !== -1 ? '&' : '?')
                    + 'form_key=' + encodeURIComponent(formElem.form_key.value);
                this._submit();
                formElem.target = oldTarget;
                formElem.action = oldAction;
            }
        }
    };

    /**
     * Actions after data post complete. Hide load mask, remove iframe, run response processing method.
     *
     * @param object response
     * @return void
     */
    varienForm.prototype.postToFrameComplete = function(response) {
        const iframe = document.getElementById(this.ifrElemName);
        if (iframe) {
            iframe.remove();
        }
        if (typeof hideLoader === 'function') {
            hideLoader();
        }
        this.postToFrameProcessResponse(response);
    };

    /**
     * Process response JSON.
     *
     * @param object response
     * @return void
     */
    varienForm.prototype.postToFrameProcessResponse = function(response) {
        if (typeof response !== 'object') {
            return alert('<?= $this->jsQuoteEscape($this->__('Invalid response')) ?>');
        }
        Object.entries(response).forEach(([key, value]) => {
            switch (key) {
                case 'show':
                case 'clear':
                case 'hide':
                    Object.entries(value).forEach(([valKey, valValue]) => {
                        const el = document.getElementById(valValue);
                        if (el) {
                            if (key === 'show') {
                                el.style.display = '';
                            } else if (key === 'hide') {
                                el.style.display = 'none';
                            } else if (key === 'clear') {
                                el.innerHTML = '';
                            }
                        }
                    });
                    break;
                case 'innerHTML':
                case 'value':
                    Object.entries(value).forEach(([valKey, valValue]) => {
                        const el = document.getElementById(valKey);
                        if (el) {
                            el[key] = valValue;
                            // if element does not visible
                            if (!el.offsetWidth) {
                                const entryEdit = el.closest('div.entry-edit');
                                if (entryEdit) {
                                    entryEdit.style.display = '';
                                }
                            }
                        }
                    });
                    break;
                case 'removeClassName':
                case 'addClassName':
                    Object.entries(value).forEach(([valKey, valValue]) => {
                        const el = document.getElementById(valKey);
                        if (el) {
                            if (key === 'addClassName') {
                                el.classList.add(valValue);
                            } else {
                                el.classList.remove(valValue);
                            }
                        }
                    });
                    break;
                default:
                    alert(key + ': ' + value);
                    break;
            }
        });
    };

    /**
     * Send form data to Start action when file is validated.
     *
     * @param string newActionUrl
     * @param string sourceFileField
     * @return void
     */
    varienForm.prototype.startImport = function(newActionUrl, sourceFileField) {
        const sourceField = document.getElementById(sourceFileField);
        if (sourceField) {
            sourceField.classList.remove('required-entry');
            this.postToFrame(newActionUrl);
            sourceField.classList.add('required-entry');
        }
    };
</script>
