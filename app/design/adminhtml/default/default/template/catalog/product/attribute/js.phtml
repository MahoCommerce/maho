<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2022 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<script type="text/javascript">
function saveAndContinueEdit(){
    disableElements('save');
    var activeTab = product_attribute_tabsJsTabs.activeTab.id;
    if (editForm.submit(document.getElementById('edit_form').action+'back/edit/tab/' + activeTab) == false) {
        enableElements('save');
     }
    varienGlobalEvents.attachEventHandler('formValidateAjaxComplete', function (){
        enableElements('save');
    });
}

function saveAttribute(){
    disableElements('save');
    if (editForm.submit() == false){
        enableElements('save');
    }
    varienGlobalEvents.attachEventHandler('formValidateAjaxComplete', function (){
        enableElements('save');
    });
}

function toggleApplyVisibility(select) {
    const selectElement = typeof select === 'string' ? document.getElementById(select) : select;
    if (!selectElement) return;

    const nextSelect = selectElement.nextElementSibling;
    while (nextSelect && nextSelect.tagName !== 'SELECT') {
        nextSelect = nextSelect.nextElementSibling;
    }

    if (nextSelect) {
        if (selectElement.value == 1) {
            nextSelect.classList.remove('no-display', 'ignore-validate');
        } else {
            nextSelect.classList.add('no-display', 'ignore-validate');
            Array.from(nextSelect.options).forEach(option => {
                option.selected = false;
            });
        }
    }
}

function checkOptionsPanelVisibility() {
    const panel = document.getElementById('matage-options-panel');
    if (panel) {
        const frontendInput = document.getElementById('frontend_input');
        if (frontendInput && (frontendInput.value === 'select' || frontendInput.value === 'multiselect')) {
            panel.style.display = '';
        } else {
            panel.style.display = 'none';
        }
    }
}

function bindAttributeInputType() {
    checkOptionsPanelVisibility();
    switchDefaultValueField();
    checkIsConfigurableVisibility();

    const frontendInput = document.getElementById('frontend_input');
    const isFilterable = document.getElementById('is_filterable');
    const isFilterableInSearch = document.getElementById('is_filterable_in_search');
    const backendType = document.getElementById('backend_type');

    if (frontendInput && (frontendInput.value === 'select' || frontendInput.value === 'multiselect' || frontendInput.value === 'price')) {
        if (isFilterable && !isFilterable.getAttribute('readonly')) {
            isFilterable.disabled = false;
        }
        if (isFilterableInSearch && !isFilterableInSearch.getAttribute('readonly')) {
            isFilterableInSearch.disabled = false;
        }
        if (backendType && backendType.options) {
            Array.from(backendType.options).forEach((option, index) => {
                if (option.value === 'int') {
                    backendType.selectedIndex = index;
                }
            });
        }
    } else {
        if (isFilterable) {
            isFilterable.selectedIndex = 0;
            isFilterable.disabled = true;
        }
        if (isFilterableInSearch) {
            isFilterableInSearch.disabled = true;
        }
    }

    if (frontendInput && (frontendInput.value === 'multiselect'
        || frontendInput.value === 'gallery'
        || frontendInput.value === 'textarea')) {
        const usedForSortBy = document.getElementById('used_for_sort_by');
        if (usedForSortBy) {
            usedForSortBy.disabled = true;
        }
    } else {
        const usedForSortBy = document.getElementById('used_for_sort_by');
        if (usedForSortBy && !usedForSortBy.getAttribute('readonly')) {
            usedForSortBy.disabled = false;
        }
    }

    setRowVisibility('is_wysiwyg_enabled', false);
    setRowVisibility('is_html_allowed_on_front', false);

    const frontendClass = document.getElementById('frontend_class');
    const isWysiwygEnabled = document.getElementById('is_wysiwyg_enabled');
    const isHtmlAllowedOnFront = document.getElementById('is_html_allowed_on_front');

    switch (frontendInput.value) {
        case 'textarea':
            setRowVisibility('is_wysiwyg_enabled', true);
            if (isWysiwygEnabled && isWysiwygEnabled.value === '0') {
                setRowVisibility('is_html_allowed_on_front', true);
                if (isHtmlAllowedOnFront) {
                    isHtmlAllowedOnFront.disabled = false;
                }
            }
            if (frontendClass) {
                frontendClass.value = '';
                frontendClass.disabled = true;
            }
            break;
        case 'text':
            setRowVisibility('is_html_allowed_on_front', true);
            if (isHtmlAllowedOnFront) {
                isHtmlAllowedOnFront.disabled = false;
            }

            if (frontendClass && !frontendClass.getAttribute('readonly')) {
                frontendClass.disabled = false;
            }
            break;
        case 'select':
        case 'multiselect':
            setRowVisibility('is_html_allowed_on_front', true);
            if (isHtmlAllowedOnFront) {
                isHtmlAllowedOnFront.disabled = false;
            }
            break;
        default:
            if (frontendClass) {
                frontendClass.value = '';
                frontendClass.disabled = true;
            }
    }

    switchIsFilterable();
}

function switchIsFilterable() {
    const isFilterable = document.getElementById('is_filterable');
    const position = document.getElementById('position');

    if (isFilterable && position) {
        if (isFilterable.selectedIndex === 0) {
            position.disabled = true;
        } else {
            if (!position.getAttribute('readonly')) {
                position.disabled = false;
            }
        }
    }
}

function disableApplyToValue(value) {
    const applyToSelect = document.getElementById('apply_to');
    if (applyToSelect && applyToSelect.options) {
        Array.from(applyToSelect.options).forEach(option => {
            if (value === option.value) {
                option.disabled = true;
                option.selected = false;
            }
        });
    }
}

function switchDefaultValueField() {
    const frontendInput = document.getElementById('frontend_input');
    if (!frontendInput) {
        return;
    }

    const currentValue = frontendInput.value;

    let defaultValueTextVisibility = false;
    let defaultValueTextareaVisibility = false;
    let defaultValueDateVisibility = false;
    let defaultValueYesnoVisibility = false;
    let scopeVisibility = true;

    switch (currentValue) {
        case 'select':
            optionDefaultInputType = 'radio';
            break;

        case 'multiselect':
            optionDefaultInputType = 'checkbox';
            break;

        case 'date':
            defaultValueDateVisibility = true;
            break;

        case 'boolean':
            defaultValueYesnoVisibility = true;
            break;

        case 'textarea':
            defaultValueTextareaVisibility = true;
            break;

        case 'media_image':
            defaultValueTextVisibility = false;
            break;
        case 'price':
            scopeVisibility = false;
        default:
            defaultValueTextVisibility = true;
            break;
    }

    const applyToSelect = document.getElementById('apply_to');
    switch (currentValue) {
        <?php foreach (Mage::helper('catalog')->getAttributeDisabledTypes() as $type=>$disabled): ?>
            case '<?= $type ?>':
            <?php foreach ($disabled as $one): ?>
                disableApplyToValue('<?= $one ?>');
            <?php endforeach ?>
            break;
        <?php endforeach ?>
        default:
        if (applyToSelect && applyToSelect.options) {
            Array.from(applyToSelect.options).forEach(option => {
                option.disabled = false;
            });
        }
        break;
    }

    let frontFieldset = document.getElementById('front_fieldset');
    let previousElement;

    switch (currentValue) {
        case 'media_image':
            if (frontFieldset) {
                previousElement = frontFieldset.previousElementSibling;
                if (previousElement) {
                    previousElement.style.display = 'none';
                }
                frontFieldset.style.display = 'none';
            }

            setRowVisibility('is_required', false);
            setRowVisibility('is_unique', false);
            setRowVisibility('frontend_class', false);
        break;

        <?php foreach (Mage::helper('catalog')->getAttributeHiddenFields() as $type=>$fields): ?>
            case '<?= $type ?>':
                <?php foreach ($fields as $one): ?>
                    <?php if ($one == '_front_fieldset'): ?>
                        if (frontFieldset) {
                            previousElement = frontFieldset.previousElementSibling;
                            if (previousElement) {
                                previousElement.style.display = 'none';
                            }
                            frontFieldset.style.display = 'none';
                        }
                    <?php elseif ($one == '_default_value'): ?>
                        defaultValueTextVisibility =
                        defaultValueTextareaVisibility =
                        defaultValueDateVisibility =
                        defaultValueYesnoVisibility = false;
                    <?php elseif ($one == '_scope'): ?>
                        scopeVisibility = false;
                    <?php else: ?>
                        setRowVisibility('<?= $one ?>', false);
                    <?php endif ?>
                <?php endforeach ?>
            break;
        <?php endforeach ?>

        default:
            if (frontFieldset) {
                previousElement = frontFieldset.previousElementSibling;
                if (previousElement) {
                    previousElement.style.display = '';
                }
                frontFieldset.style.display = '';
            }
            setRowVisibility('is_required', true);
            setRowVisibility('is_unique', true);
            setRowVisibility('frontend_class', true);
            setRowVisibility('is_configurable', true);
        break;
    }

    setRowVisibility('default_value_text', defaultValueTextVisibility);
    setRowVisibility('default_value_textarea', defaultValueTextareaVisibility);
    setRowVisibility('default_value_date', defaultValueDateVisibility);
    setRowVisibility('default_value_yesno', defaultValueYesnoVisibility);
    setRowVisibility('is_global', scopeVisibility);

    const elems = document.getElementsByName('default[]');
    Array.from(elems).forEach(elem => {
        elem.type = optionDefaultInputType;
    });
}

function setRowVisibility(id, isVisible) {
    const element = document.getElementById(id);
    if (element) {
        const td = element.parentNode;
        const tr = td ? td.parentNode : null;

        if (tr) {
            if (isVisible) {
                tr.style.display = '';
            } else {
                tr.blur();
                tr.style.display = 'none';
            }
        }
    }
}

function checkIsConfigurableVisibility() {
    const isConfigurable = document.getElementById('is_configurable');
    const isGlobal = document.getElementById('is_global');
    const frontendInput = document.getElementById('frontend_input');

    if (!isConfigurable || !isGlobal || !frontendInput) return;

    if (isGlobal.value === '1' && frontendInput.value === 'select') {
        setRowVisibility('is_configurable', true);
    } else {
        setRowVisibility('is_configurable', false);
    }
}

function updateRequiredOptions() {
    const frontendInput = document.getElementById('frontend_input');
    const isRequired = document.getElementById('is_required');
    const optionCountCheck = document.getElementById('option-count-check');

    if (frontendInput && isRequired && optionCountCheck) {
        if (frontendInput.value === 'select' && isRequired.value == 1) {
            optionCountCheck.classList.add('required-options-count');
        } else {
            optionCountCheck.classList.remove('required-options-count');
        }
    }
}

const frontendInput = document.getElementById('frontend_input');
if (frontendInput) {
    frontendInput.addEventListener('change', updateRequiredOptions);
    frontendInput.addEventListener('change', bindAttributeInputType);
}

const isGlobal = document.getElementById('is_global');
if (isGlobal) {
    isGlobal.addEventListener('change', checkIsConfigurableVisibility);
}

const isFilterable = document.getElementById('is_filterable');
if (isFilterable) {
    isFilterable.addEventListener('change', switchIsFilterable);
}

const isRequired = document.getElementById('is_required');
if (isRequired) {
    isRequired.addEventListener('change', updateRequiredOptions);
}
bindAttributeInputType();
</script>
