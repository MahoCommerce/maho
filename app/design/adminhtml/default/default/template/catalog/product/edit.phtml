<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * Template for Mage_Adminhtml_Block_Catalog_Product_Edit
 *
 * @var Mage_Adminhtml_Block_Catalog_Product_Edit $this
 */
?>
<div class="content-header">
    <h3><?= $this->getHeader() ?></h3>
    <p class="content-buttons form-buttons"><?= $this->getBackButtonHtml() ?>
    <?= $this->getCancelButtonHtml() ?>
    <?php if($this->getProductId()): ?>
        <?= $this->getDeleteButtonHtml() ?>
        <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
            <?= $this->getDuplicateButtonHtml() ?>
        <?php endif ?>
    <?php endif ?>
    <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
        <?= $this->getSaveButtonHtml() ?>
        <?= $this->getSaveAndEditButtonHtml() ?>
    <?php endif ?>
    </p>
</div>
<form action="<?= $this->getSaveUrl() ?>" method="post" id="product_edit_form" enctype="multipart/form-data">
    <?= $this->getBlockHtml('formkey') ?>
    <div style="display:none"></div>
</form>
<script type="text/javascript">
    const productTemplateSyntax = /(^|.|\r|\n)({{(\w+)}})/;
    const productForm = new varienForm('product_edit_form', '<?= $this->getValidationUrl() ?>');
    productForm._processValidationResult = function(transport) {
        const response = transport.responseText.evalJSON();
        if (response.error) {
            if (response.attribute) {
                const attributeElement = document.getElementById(response.attribute);
                if (attributeElement) {
                    attributeElement.setHasError(true, productForm);
                    Validation.ajaxError(attributeElement, response.message);
                    attributeElement.focus();
                }
            } else {
                const messagesElement = document.getElementById('messages');
                if (messagesElement) {
                    messagesElement.innerHTML = `<ul class="messages"><li class="error-msg"><ul><li>${response.message}</li></ul></li></ul>`;
                }
            }
        } else {
            productForm._submit();
        }
    };
    function saveAndContinueEdit(urlTemplate) {
        const template = new Template(urlTemplate, productTemplateSyntax);
        const url = template.evaluate({tab_id: product_info_tabsJsTabs.activeTab.id});
        productForm.submit(url);
    }
    function setSettings(urlTemplate, setElement, typeElement) {
        const template = new Template(urlTemplate, productTemplateSyntax);
        const setElementObj = document.getElementById(setElement) || document.querySelector(`[name="${setElement}"]`);
        const typeElementObj = document.getElementById(typeElement) || document.querySelector(`[name="${typeElement}"]`);
        const setValue = setElementObj ? setElementObj.value : '';
        const typeValue = typeElementObj ? typeElementObj.value : '';
        setLocation(template.evaluate({attribute_set: setValue, type: typeValue}));
    }

    function setSuperSettings(urlTemplate, attributesClass, validateField) {
        const attributesFields = document.querySelectorAll('.' + attributesClass);
        let attributes = [];

        attributesFields.forEach(field => {
            if (field.checked && field.value) {
                attributes.push(field.value);
            }
        });

        const validateFieldElement = document.getElementById(validateField);
        if (validateFieldElement) {
            validateFieldElement.value = attributes.length ? 'has-attributes' : 'no-attributes';
        }

        if (productForm.validator.validate()) {
            const template = new Template(urlTemplate, productTemplateSyntax);
            const url = template.evaluate({
                attributes: btoa(attributes.join(',')).replace(/\//g, '%2F').replace(/=/g, '%3D')
            });
            setLocation(url);
        }
    }

    function checkMaxLength(Object, MaxLen)
    {
        if (Object.value.length > MaxLen-1) {
            Object.value = Object.value.substr(0, MaxLen);
        }
        return 1;
    }

document.addEventListener('DOMContentLoaded', function() {
    const objName = '<?= $this->getSelectedTabId() ?>';
    if (objName) {
        const obj = document.getElementById(objName);
        if (obj) {
            //IE fix (bubbling event model)
            product_info_tabsJsTabs.setSkipDisplayFirstTab();
            product_info_tabsJsTabs.showTabContent(obj);
        }
    }
});

Validation.addAllThese([
    ['validate-super-product-attributes', '<?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Please select one or more attributes.')) ?>', function(v) {
                return (v != "no-attributes");
            }]]);
</script>
