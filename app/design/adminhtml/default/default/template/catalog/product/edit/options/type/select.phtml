<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_Catalog_Product_Edit_Tab_Options_Type_Select $this */
?>
<script type="text/javascript">
OptionTemplateSelect = '<table class="border" cellpadding="0" cellspacing="0">'+
        '<input type="hidden" class="required-option-select-type-rows" name="validation_{{option_id}}_result" value="" >'+
        '<thead>'+
        '<tr class="headings">'+
            '<th class="type-title"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Title')) ?> <span class="required">*</span></th>'+
            <?php if ($this->getCanReadPrice() !== false) : ?>
            '<th class="type-price"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Price')) ?></th>' +
            '<th class="type-type"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Price Type')) ?></th>' +
            <?php endif ?>
            '<th class="type-sku"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('SKU')) ?></th>'+
            '<th class="type-order"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Sort Order')) ?></th>'+
            '<th class="type-butt last">&nbsp;</th>'+
        '</tr>'+
        '</thead>'+
        '<tbody id="select_option_type_row_{{option_id}}">'+
        '</tbody>'+
        '<tfoot>'+
        '<tr>'+
        '<td colspan="100" class="a-right"><?= $this->getAddButtonHtml() ?></td>'+
        '</tr>'+
        '</tfoot>'+
    '</table>';

OptionTemplateSelectRow = '<tr id="product_option_{{id}}_select_{{select_id}}">'+
            '<td>'+
            '<input type="hidden" name="product[options][{{id}}][values][{{select_id}}][option_type_id]" value="{{option_type_id}}">'+
            '<input type="hidden" id="product_option_{{id}}_select_{{select_id}}_is_delete" name="product[options][{{id}}][values][{{select_id}}][is_delete]" value="">'+
            '<input type="text" class="required-entry input-text select-type-title" id="product_option_{{id}}_select_{{select_id}}_title" name="product[options][{{id}}][values][{{select_id}}][title]" value="{{title}}">{{checkboxScopeTitle}}</td>'+
            <?php if ($this->getCanReadPrice() !== false) : ?>
            '<td><input type="text" class="input-text validate-number product-option-price" id="product_option_{{id}}_select_{{select_id}}_price" name="product[options][{{id}}][values][{{select_id}}][price]" value="{{price}}"<?php if ($this->getCanEditPrice() === false) : ?> disabled="disabled"<?php endif ?>></td>' +
            '<td><?= $this->getPriceTypeSelectHtml() ?>{{checkboxScopePrice}}</td>' +
            <?php else: ?>
            '<input type="hidden" id="product_option_{{id}}_select_{{select_id}}_price" name="product[options][{{id}}][values][{{select_id}}][price]">' +
            '<input type="hidden" name="product[options][{{id}}][values][{{select_id}}][price_type]" id="product_option_{{id}}_select_{{select_id}}_price_type">' +
            <?php endif ?>
            '<td><input type="text" class="input-text" name="product[options][{{id}}][values][{{select_id}}][sku]" value="{{sku}}"></td>'+
            '<td><input type="text" class="validate-zero-or-greater input-text" name="product[options][{{id}}][values][{{select_id}}][sort_order]" value="{{sort_order}}"></td>'+
            '<td class="last"><span title="Delete row"><?= $this->getDeleteButtonHtml() ?></span></td>'+
        '</tr>';

const selectOptionType = {
    div: 'select_option_type_row',
    itemCount: 0,
    templateSyntax: /(^|.|\r|\n)({{(\w+)}})/,
    templateText: OptionTemplateSelectRow,
    add: function(data) {
        this.template = new Template(this.templateText, this.templateSyntax);
        let optionId;

        if (data.target || data.srcElement) { //data is Event (work in IE and Firefox)
            const element = data.target.closest('button');
            optionId = element.id.replace('add_select_row_button_', '');
            data = {};
            data.option_type_id = '-1';
            data.select_id = this.itemCount;
        } else {
            optionId = data.option_id;
            data.select_id = data.option_type_id;
            this.itemCount = data.item_count;
        }

        data.id = optionId;

        const container = document.getElementById(this.div + '_' + data.id);
        if (container) {
            container.insertAdjacentHTML('beforeend', this.template.evaluate(data));
        }

        const inputs = document.querySelectorAll(
            `#product_option_${data.id}_select_${data.select_id} input,` +
            `#product_option_${data.id}_select_${data.select_id} select,` +
            `#product_option_${data.id}_select_${data.select_id} textarea`
        );
        inputs.forEach(el => {
            el.addEventListener('change', el.setHasChanges ? el.setHasChanges.bind(el) : function() {});
        });

        const buttons = document.querySelectorAll(`#product_option_${data.id}_select_${data.select_id} button`);
        buttons.forEach(el => {
            el.addEventListener('click', el.setHasChanges ? el.setHasChanges.bind(el) : function() {});
        });

        if (data.checkboxScopeTitle) {
            //set disabled
            const titleElement = document.getElementById(`product_option_${data.id}_select_${data.select_id}_title`);
            if (titleElement && data.scopeTitleDisabled) {
                titleElement.disabled = true;
            }
        }
        if (data.checkboxScopePrice) {
            //set disabled
            const priceElement = document.getElementById(`product_option_${data.id}_select_${data.select_id}_price`);
            const priceTypeElement = document.getElementById(`product_option_${data.id}_select_${data.select_id}_price_type`);
            if (priceElement && data.scopePriceDisabled) {
                priceElement.disabled = true;
            }
            if (priceTypeElement && data.scopePriceDisabled) {
                priceTypeElement.disabled = true;
            }
        }

        if (data.price_type) {
            const priceTypeSelect = document.getElementById(`product_option_${data.id}_select_${data.select_id}_price_type`);
            if (priceTypeSelect) {
                Array.from(priceTypeSelect.options).forEach(option => {
                    if (option.value === data.price_type) option.selected = true;
                });
            }
        }

        this.itemCount++;
        this.bindRemoveButtons();
    },
    remove: function(event) {
        const element = event.target.closest('tr');

        if (element) {
            const deleteInput = document.getElementById(element.id + '_is_delete');
            if (deleteInput) {
                deleteInput.value = '1';
            }
            element.classList.add('no-display', 'ignore-validate');
            element.style.display = 'none';
        }
    },
    bindRemoveButtons: function() {
        const buttons = document.querySelectorAll('.delete-select-row');
        buttons.forEach(button => {
            if (!button.binded) {
                button.binded = true;
                button.addEventListener('click', this.remove.bind(this));
            }
        });
    },
    bindAddButton: function() {
        const buttons = document.querySelectorAll('.add-select-row');
        buttons.forEach(button => {
            if (!button.binded) {
                button.binded = true;
                button.addEventListener('click', this.add.bind(this));
            }
        });
    }
}

const optionPanelTypeSelect = document.getElementById('option_panel_type_select');
if (optionPanelTypeSelect) {
    optionPanelTypeSelect.remove();
}

selectOptionType.bindRemoveButtons();

Validation.addAllThese([
    ['required-option-select-type-rows', <?= $this->helper('core')->jsonEncode(Mage::helper('catalog')->__('Please add rows to option.')) ?>, function(v, elm) {
        const optionContainerElm = elm.closest('div.grid');
        let selectTypesFlag = false;
        if (optionContainerElm) {
            const selectTypeElements = document.querySelectorAll(`#${optionContainerElm.id} .select-type-title`);
            selectTypeElements.forEach(element => {
                const row = element.closest('tr');
                if (element.id && row && row.style.display !== 'none') {
                    selectTypesFlag = true;
                }
            });
            elm.advaiceContainer = optionContainerElm.id + '_advice';
        }
        return selectTypesFlag;
    }]
]);

const addSelectRowButton = document.getElementById('add_select_row_button');
if (addSelectRowButton) {
    addSelectRowButton.addEventListener('click', selectOptionType.add.bind(selectOptionType));
}
</script>
