<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2019-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_Catalog_Product_Edit_Tab_Options_Option $this */
?>
<?= $this->getTemplatesHtml() ?>

<script type="text/javascript">
//<![CDATA[
var firstStepTemplate = '<div class="option-box" id="option_{{id}}">'+
            '<table id="<?= $this->getFieldId() ?>_{{id}}" class="option-header" cellpadding="0" cellspacing="0">'+
            '<input type="hidden" id="<?= $this->getFieldId() ?>_{{id}}_is_delete" name="<?= $this->getFieldName() ?>[{{id}}][is_delete]" value="" />'+
            '<input type="hidden" id="<?= $this->getFieldId() ?>_{{id}}_previous_type" name="<?= $this->getFieldName() ?>[{{id}}][previous_type]" value="{{type}}" />'+
            '<input type="hidden" id="<?= $this->getFieldId() ?>_{{id}}_previous_group" name="<?= $this->getFieldName() ?>[{{id}}][previous_group]" value="" />'+
            '<input type="hidden" id="<?= $this->getFieldId() ?>_{{id}}_id" name="<?= $this->getFieldName() ?>[{{id}}][id]" value="{{id}}" />'+
            '<input type="hidden" id="<?= $this->getFieldId() ?>_{{id}}_option_id" name="<?= $this->getFieldName() ?>[{{id}}][option_id]" value="{{option_id}}" />'+
            '<thead>'+
                '<tr>'+
                    '<th class="opt-title"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Title')) ?> <span class="required">*</span></th>'+
                    '<th class="opt-type"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Input Type')) ?> <span class="required">*</span></th>'+
                    '<th class="opt-req"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Is Required')) ?></th>'+
                    '<th class="opt-order"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Sort Order')) ?></th>'+
                    '<th class="a-right"><?= $this->jsQuoteEscape($this->jsQuoteEscape($this->getDeleteButtonHtml())) ?></th>'+
                '</tr>'+
            '</thead>'+
            '<tr>'+
                '<td><input type="text" class="required-entry input-text" id="<?= $this->getFieldId() ?>_{{id}}_title" name="<?= $this->getFieldName() ?>[{{id}}][title]" value="{{title}}">{{checkboxScopeTitle}}</td>'+
                '<td><?= $this->getTypeSelectHtml() ?></td>'+
                '<td class="opt-req"><?= $this->getRequireSelectHtml() ?></td>'+
                '<td><input type="text" class="validate-zero-or-greater input-text" name="<?= $this->getFieldName() ?>[{{id}}][sort_order]" value="{{sort_order}}"></td>'+
                '<td>&nbsp;</td>'+
            '</tr></table></div>';

const productOption = {
    div: document.getElementById('product_options_container_top'),
    templateSyntax: /(^|.|\r|\n)({{(\w+)}})/,
    templateText: firstStepTemplate,
    itemCount: 1,
    add: function(data) {
        this.template = new Template(this.templateText, this.templateSyntax);

        if (!data.id) {
            data = {};
            data.id = this.itemCount;
            data.type = '';
            data.option_id = 0;
        } else {
            this.itemCount = data.item_count;
        }

        this.div.insertAdjacentHTML('afterend', this.template.evaluate(data));

        //set selected type
        if (data.type) {
            const typeSelect = document.getElementById('<?= $this->getFieldId() ?>_' + data.id + '_type');
            if (typeSelect) {
                Array.from(typeSelect.options).forEach(option => {
                    if (option.value === data.type) option.selected = true;
                });
            }
        }

        //set selected is_require
        if (data.hasOwnProperty('is_require')) {
            const requireSelect = document.getElementById('<?= $this->getFieldId() ?>_' + data.id + '_is_require');
            if (requireSelect) {
                Array.from(requireSelect.options).forEach(option => {
                    if (option.value == data.is_require) option.selected = true;
                });
            }
        }

        if (data.checkboxScopeTitle) {
            //set disabled
            const titleInput = document.getElementById('<?= $this->getFieldId() ?>_' + data.option_id + '_title');
            if (titleInput && data.scopeTitleDisabled) {
                titleInput.disabled = true;
            }
        }

        this.itemCount++;
        this.bindRemoveButtons();
        productOptionType.bindSelectInputType();
    },
    remove: function(event) {
        const element = event.target.closest('div');
        if (element) {
            const deleteInput = document.getElementById('product_' + element.id + '_is_delete');
            if (deleteInput) {
                deleteInput.value = '1';
            }
            element.classList.add('no-display', 'ignore-validate');
            element.style.display = 'none';
        }
    },
    bindRemoveButtons: function() {
        const buttons = document.querySelectorAll('div.product-custom-options .delete-product-option');
        buttons.forEach(button => {
            if (!button.binded) {
                button.binded = true;
                button.addEventListener('click', this.remove.bind(this));
            }
        });

        const inputs = document.querySelectorAll('div.product-custom-options button, div.product-custom-options input, div.product-custom-options select, div.product-custom-options textarea');
        <?php if ($this->isReadonly()):?>
        inputs.forEach(input => {
            input.disabled = true;
            if (input.tagName.toLowerCase() === 'button') {
                input.classList.add('disabled');
            }
        });
        <?php else: ?>
        const changeInputs = document.querySelectorAll('div.product-custom-options input, div.product-custom-options select, div.product-custom-options textarea');
        changeInputs.forEach(el => {
            el.addEventListener('change', el.setHasChanges ? () => el.setHasChanges(el) : function() {});
        });
        const clickButtons = document.querySelectorAll('div.product-custom-options button');
        clickButtons.forEach(el => {
            el.addEventListener('click', el.setHasChanges ? () => el.setHasChanges(el) : function() {});
        });
        <?php endif ?>
    }
}


const productOptionType = {
    templateSyntax: /(^|.|\r|\n)({{(\w+)}})/,
    loadStepTwo: function(event) {
        const element = event.target.closest('select');
        if (!element) return;

        let group = '';
        let template = '';
        const elementId = element.id;
        const previousGroupElm = document.getElementById(elementId.replace('_type', '_previous_group'));

        switch(element.value) {
            case 'field':
            case 'area':
                template = OptionTemplateText;
                group = 'text';
                break;
            case 'file':
                template = OptionTemplateFile;
                group = 'file';
                break;
            case 'drop_down':
            case 'radio':
            case 'checkbox':
            case 'multiple':
                template = OptionTemplateSelect;
                group = 'select';
                break;
            case 'date':
            case 'date_time':
            case 'time':
                template = OptionTemplateDate;
                group = 'date';
                break;
            default:
                template = '';
                group = 'unknown';
                break;
        }

        if (previousGroupElm && previousGroupElm.value !== group) {
            const previousGroupElement = document.getElementById(elementId + '_' + previousGroupElm.value);
            if (previousGroupElement) {
                const formElements = previousGroupElement.querySelectorAll('input, select');
                formElements.forEach(elm => {
                    if (elm.tagName.toLowerCase() === 'input' || elm.tagName.toLowerCase() === 'select') {
                        elm.name = '__delete__' + elm.name;
                    }
                });

                previousGroupElement.classList.add('no-display', 'ignore-validate');
                previousGroupElement.style.display = 'none';
            }

            previousGroupElm.value = group;

            const groupElement = document.getElementById(elementId + '_' + group);
            if (groupElement) {
                const formElements = groupElement.querySelectorAll('input, select');
                formElements.forEach(elm => {
                    if (elm.tagName.toLowerCase() === 'input' || elm.tagName.toLowerCase() === 'select') {
                        elm.name = elm.name.replace('__delete__', '');
                    }
                });
                groupElement.classList.remove('no-display', 'ignore-validate');
                groupElement.style.display = '';
            } else {
                template = `<div id="${elementId}_${group}" class="grid tier form-list">${template}</div><div id="${elementId}_${group}_advice"></div>`;
                this.secondTemplate = new Template(template, this.templateSyntax);

                let data = {};
                if (!data.option_id) {
                    data = {};
                    const idElement = document.getElementById(elementId.replace('_type', '_id'));
                    data.option_id = idElement ? idElement.value : '';
                }

                const targetElement = document.getElementById(elementId.replace('_type', ''));
                if (targetElement) {
                    targetElement.insertAdjacentHTML('afterend', this.secondTemplate.evaluate(data));
                }

                switch(element.value) {
                    case 'drop_down':
                    case 'radio':
                    case 'checkbox':
                    case 'multiple':
                        selectOptionType.bindAddButton();
                        break;
                }
            }
        }
    },
    addDataToValues: function(data) {
        let template = '';
        let group = '';

        switch(data.type) {
            case 'field':
            case 'area':
                template = OptionTemplateText;
                group = 'text';
                break;
            case 'file':
                template = OptionTemplateFile;
                group = 'file';
                break;
            case 'drop_down':
            case 'radio':
            case 'checkbox':
            case 'multiple':
                template = OptionTemplateSelect;
                group = 'select';
                break;
            case 'date':
            case 'date_time':
            case 'time':
                template = OptionTemplateDate;
                group = 'date';
                break;
        }

        const previousGroupElement = document.getElementById('<?= $this->getFieldId() ?>_' + data.id + '_previous_group');
        if (previousGroupElement) {
            previousGroupElement.value = group;
        }

        template = `<div id="<?= $this->getFieldId() ?>_{{id}}_type_${group}" class="grid tier form-list">${template}</div><div id="<?= $this->getFieldId() ?>_{{id}}_type_${group}_advice"></div>`;

        this.secondTemplate = new Template(template, this.templateSyntax);

        const targetElement = document.getElementById('<?= $this->getFieldId() ?>_' + data.option_id);
        if (targetElement) {
            targetElement.insertAdjacentHTML('afterend', this.secondTemplate.evaluate(data));
        }

        if (data.checkboxScopePrice) {
            //set disabled
            const priceElement = document.getElementById('<?= $this->getFieldId() ?>_' + data.option_id + '_price');
            const priceTypeElement = document.getElementById('<?= $this->getFieldId() ?>_' + data.option_id + '_price_type');
            if (priceElement && data.scopePriceDisabled) {
                priceElement.disabled = true;
            }
            if (priceTypeElement && data.scopePriceDisabled) {
                priceTypeElement.disabled = true;
            }
        }

        switch(data.type) {
            case 'drop_down':
            case 'radio':
            case 'checkbox':
            case 'multiple':
                if (data.optionValues) {
                    data.optionValues.forEach(value => {
                        selectOptionType.add(value);
                    });
                }
                selectOptionType.bindAddButton();
                break;
        }

        if (data.price_type) {
            const priceTypeSelect = document.getElementById('<?= $this->getFieldId() ?>_' + data.option_id + '_price_type');
            if (priceTypeSelect) {
                Array.from(priceTypeSelect.options).forEach(option => {
                    if (option.value === data.price_type) option.selected = true;
                });
            }
        }
    },
    bindSelectInputType: function() {
        const types = document.querySelectorAll('.select-product-option-type');
        types.forEach(type => {
            if (!type.binded) {
                type.binded = true;
                type.addEventListener('change', event => {
                    productOptionType.loadStepTwo(event);
                });
            }
        });
    }
}

const productOptionScope = {
    addScope: function(event) {
        const element = event.target;
        const fieldToDisable = document.getElementById(element.id.replace('_use_default', ''));

        if (fieldToDisable) {
            if (fieldToDisable.disabled) {
                if (fieldToDisable.classList.contains('product-option-price')) {
                    const typeElement = document.getElementById(fieldToDisable.id + '_type');
                    if (typeElement) {
                        typeElement.disabled = false;
                    }
                }
                fieldToDisable.disabled = false;
            } else {
                if (fieldToDisable.classList.contains('product-option-price')) {
                    const typeElement = document.getElementById(fieldToDisable.id + '_type');
                    if (typeElement) {
                        typeElement.disabled = true;
                    }
                }
                fieldToDisable.disabled = true;
            }
        }
    },
    bindScopeCheckbox: function() {
        const checkboxes = document.querySelectorAll('.product-option-scope-checkbox');
        checkboxes.forEach(checkbox => {
            if (!checkbox.binded) {
                checkbox.binded = true;
                checkbox.addEventListener('click', this.addScope.bind(this));
            }
        });
    }
}

const optionPanel = document.getElementById('option_panel');
if (optionPanel) {
    optionPanel.remove();
}

const addButton = document.getElementById('<?= $this->getAddButtonId() ?>');
if (addButton) {
    addButton.addEventListener('click', productOption.add.bind(productOption));
}

//validation for selected input type
Validation.addAllThese([
    ['required-option-select', <?= $this->helper('core')->jsonEncode(Mage::helper('catalog')->__('Select type of option')) ?>, function(v, elm) {
        if (elm.value === '') {
            return false;
        }
        return true;
    }]
]);

//adding data to templates
<?php foreach ($this->getOptionValues() as $_value): ?>
    productOption.add(<?= $_value->toJson() ?>);
    productOptionType.addDataToValues(<?= $_value->toJson() ?>);
<?php endforeach ?>

productOption.bindRemoveButtons();

//bind scope checkboxes
productOptionScope.bindScopeCheckbox();
//]]>
</script>

<div><?php if (!$this->isReadonly()):?><input type="hidden" name="affect_product_custom_options" value="1" /><?php endif ?></div>
