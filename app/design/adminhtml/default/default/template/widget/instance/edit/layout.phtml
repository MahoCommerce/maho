<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Widget_Block_Adminhtml_Widget_Instance_Edit_Tab_Main_Layout $this */
?>
<div class="entry-edit-head">
    <h4><?= Mage::helper('widget')->__('Layout Updates') ?></h4>
    <div class="right"><?= $this->getAddLayoutButtonHtml() ?></div>
</div>
<div class="fieldset">
    <div class="hor-scroll">
            <div id="page_group_container"></div>
    </div>
</div>
<script type="text/javascript">
var pageGroupTemplate = '<div class="options-box page_group_container" id="page_group_container_{{id}}">'+
    '<div class="option-box">'+
        '<div class="option-title">'+
            '<?= $this->getRemoveLayoutButtonHtml() ?>'+
            '<label for="widget_instance[{{id}}][page_group]">Display On <span class="required">*</span></label>'+
            '<?= $this->getDisplayOnSelectHtml() ?>'+
        '</div>'+
<?php foreach ($this->getDisplayOnContainers() as $container): ?>
    '<div class="no-display <?= $container['code'] ?> group_container" id="<?= $container['name'] ?>_{{id}}">'+
        '<input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][<?= $container['name'] ?>]" />'+
        '<input type="hidden" name="widget_instance[{{id}}][<?= $container['name'] ?>][page_id]" value="{{page_id}}" />'+
        '<input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][<?= $container['name'] ?>][layout_handle]" value="<?= $container['layout_handle'] ?>" />'+
        '<table cellspacing="0" class="option-header">'+
            '<col width="200" />'+
            '<col width="220" />'+
            '<col width="320" />'+
            '<col />'+
            '<thead>'+
                '<tr>'+
                    '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('%s', $container['label'])) ?></label></th>'+
                    '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Block Reference')) ?> <span class="required">*</span></label></th>'+
                    '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Template')) ?></label></th>'+
                    '<th>&nbsp;</th>'+
                '</tr>'+
            '</thead>'+
            '<tbody>'+
                '<tr>'+
                    '<td>'+
                        '<input type="radio" class="radio for_all" id="all_<?= $container['name'] ?>_{{id}}" name="widget_instance[{{id}}][<?= $container['name'] ?>][for]" value="all" onclick="WidgetInstance.togglePageGroupChooser(this)" checked="checked" />&nbsp;'+
                        '<label for="all_<?= $container['name'] ?>_{{id}}"><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('All')) ?></label>&nbsp;&nbsp;&nbsp;'+
                        '<input type="radio" class="radio for_specific" id="specific_<?= $container['name'] ?>_{{id}}" name="widget_instance[{{id}}][<?= $container['name'] ?>][for]" value="specific" onclick="WidgetInstance.togglePageGroupChooser(this)" />&nbsp;'+
                        '<label for="specific_<?= $container['name'] ?>_{{id}}"><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Specific %s', $container['label'])) ?></label>'+
                    '</td>'+
                    '<td>'+
                        '<div class="block_reference_container">'+
                            '<div class="block_reference"></div>'+
                        '</div>'+
                    '</td>'+
                    '<td>'+
                        '<div class="block_template_container">'+
                            '<div class="block_template"></div>'+
                        '</div>'+
                    '</td>'+
                '</tr>'+
            '</tbody>'+
        '</table>'+
        '<div class="no-display chooser_container" id="<?= $container['name'] ?>_ids_{{id}}">'+
            '<input type="hidden" class="is_anchor_only" name="widget_instance[{{id}}][<?= $container['name'] ?>][is_anchor_only]" value="<?= $container['is_anchor_only'] ?>" />'+
            '<input type="hidden" class="product_type_id" name="widget_instance[{{id}}][<?= $container['name'] ?>][product_type_id]" value="<?= $container['product_type_id'] ?>" />'+
            '<p>' +
                '<input type="text" class="input-text entities" name="widget_instance[{{id}}][<?= $container['name'] ?>][entities]" value="{{<?= $container['name'] ?>_entities}}" readonly="readonly" />&nbsp;' +
                '<a class="widget-option-chooser" href="javascript:void(0)" onclick="WidgetInstance.displayEntityChooser(\'<?= $container['code'] ?>\', \'<?= $container['name'] ?>_ids_{{id}}\')"  title="<?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Open Chooser')) ?>">' +
                    '<img src="<?= Mage::getDesign()->getSkinUrl('images/rule_chooser_trigger.gif') ?>" class="v-middle" alt="<?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Open Chooser')) ?>" />' +
                '</a>&nbsp;' +
                '<a href="javascript:void(0)" onclick="WidgetInstance.hideEntityChooser(\'<?= $container['name'] ?>_ids_{{id}}\')" title="<?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Apply')) ?>">' +
                    '<?= $this->helper('core')->jsQuoteEscape($this->getIconSvg('circle-check')) ?>' +
                '</a>' +
            '</p>'+
            '<div class="chooser"></div>'+
        '</div>'+
    '</div>'+
<?php endforeach ?>
'<div class="no-display all_pages group_container" id="all_pages_{{id}}">'+
    '<input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][all_pages]" />'+
    '<input type="hidden" name="widget_instance[{{id}}][all_pages][page_id]" value="{{page_id}}" />'+
    '<input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][all_pages][layout_handle]" value="default" />'+
    '<input type="hidden" class="for_all" name="widget_instance[{{id}}][all_pages][for]" value="all" />'+
    '<table cellspacing="0" class="option-header">'+
        '<col width="220" />'+
        '<col width="320" />'+
        '<col />'+
        '<thead>'+
            '<tr>'+
                '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Block Reference')) ?> <span class="required">*</span></label></th>'+
                '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Template')) ?></label></th>'+
                '<th>&nbsp;</th>'+
            '</tr>'+
        '</thead>'+
        '<tbody>'+
            '<tr>'+
                '<td>'+
                    '<div class="block_reference_container">'+
                        '<div class="block_reference"></div>'+
                    '</div>'+
                '</td>'+
                '<td>'+
                    '<div class="block_template_container">'+
                        '<div class="block_template"></div>'+
                    '</div>'+
                '</td>'+
                '<td>&nbsp;</td>'+
            '</tr>'+
        '</tbody>'+
    '</table>'+
'</div>'+
'<div class="no-display ignore-validate pages group_container" id="pages_{{id}}">'+
    '<input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][pages]" />'+
    '<input type="hidden" name="widget_instance[{{id}}][pages][page_id]" value="{{page_id}}" />'+
    '<input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][all_pages][layout_handle]" value="default" />'+
    '<input type="hidden" class="for_all" name="widget_instance[{{id}}][pages][for]" value="all" />'+
    '<table cellspacing="0" class="option-header">'+
        '<col width="200" />'+
        '<col width="220" />'+
        '<col width="320" />'+
        '<col />'+
        '<thead>'+
            '<tr>'+
                '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Page')) ?> <span class="required">*</span></label></th>'+
                '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Block Reference')) ?> <span class="required">*</span></label></th>'+
                '<th><label><?= $this->helper('core')->jsQuoteEscape(Mage::helper('widget')->__('Template')) ?></label></th>'+
                '<th>&nbsp;</th>'+
            '</tr>'+
        '</thead>'+
        '<tbody>'+
            '<tr>'+
                '<td><?= $this->getLayoutsChooser() ?></td>'+
                '<td>'+
                    '<div class="block_reference_container">'+
                        '<div class="block_reference"></div>'+
                    '</div>'+
                '</td>'+
                '<td>'+
                    '<div class="block_template_container">'+
                        '<div class="block_template"></div>'+
                    '</div>'+
                '</td>'+
                '<td>&nbsp;</td>'+
            '</tr>'+
        '</tbody>'+
    '</table>'+
'</div>'+
'</div>'+
'</div>';

const WidgetInstance = {
    pageGroupTemplate    : pageGroupTemplate,
    pageGroupContainerId : 'page_group_container',
    templatePattern : /(^|.|\r|\n)({{(\w+)}})/,
    count : 0,
    activePageGroups : new Map(),
    selectedItems : {},

    addPageGroup(data) {
        const pageGroupContainer = document.getElementById(this.pageGroupContainerId);
        if (this.pageGroupTemplate && pageGroupContainer) {
            if (!data.page_id) {
                data = {};
                data.page_id = 0;
                data.entities = '';
            }
            data.id = this.count++;
            if (data[data.group + '_entities']) {
                const selected_entities = data[data.group + '_entities'].split(',');
                if (selected_entities.length > 0) {
                    for (let i = 0; i < selected_entities.length; i++) {
                        this.addProductItemToSelection(data.group + '_ids_' + data.id, selected_entities[i]);
                    }
                }
            }
            const processedTemplate = this.evaluateTemplate(this.pageGroupTemplate, data);
            pageGroupContainer.insertAdjacentHTML('afterbegin', processedTemplate);
            if (data.group) {
                const pageGroup = document.getElementById(data.group+'_'+data.id);
                const additional = {};
                additional.selectedBlock = data.block;
                additional.selectedTemplate = data.template;
                additional.position = data.position;
                additional.for_value = data.for_value;
                additional.template = '';
                if (data.group === 'pages') {
                    const layoutSelect = pageGroup.querySelector('select#layout_handle');
                    if (layoutSelect) {
                        for (let i = 0; i < layoutSelect.options.length; i++) {
                            if (layoutSelect.options[i].value === data.layout_handle) {
                                layoutSelect.options[i].selected = true;
                                break;
                            }
                        }
                    }
                }
                const selectGroupContainer = document.getElementById(this.pageGroupContainerId+'_'+data.id);
                if (selectGroupContainer) {
                    const selectGroupElm = selectGroupContainer.querySelector('select.page_group_select');
                    if (selectGroupElm) {
                        for (let i = 0; i < selectGroupElm.options.length; i++) {
                            if (selectGroupElm.options[i].value === data.group) {
                                selectGroupElm.options[i].selected = true;
                                break;
                            }
                        }
                    }
                }
                const forElm = pageGroup.querySelector('input.for_'+data.for_value);
                if (forElm) {
                    const forAllElm = pageGroup.querySelector('input.for_all');
                    if (forAllElm) {
                        forAllElm.defaultChecked = false;
                    }
                    forElm.defaultChecked = true;
                    forElm.checked = true;
                    this.togglePageGroupChooser(forElm);
                }
                this.displayPageGroup(pageGroup, additional);
            }
        }
    },

    evaluateTemplate(template, data) {
        return template.replace(/{{(\w+)}}/g, (match, key) => {
            return data[key] !== undefined ? data[key] : match;
        });
    },
    removePageGroup(element) {
        const container = element.closest('div.page_group_container');
        if (container) {
            container.remove();
        }
    },

    addProductItemToSelection(groupId, item) {
        if (this.selectedItems[groupId] === undefined) {
            this.selectedItems[groupId] = new Map();
        }
        if (!isNaN(parseInt(item))) {
            this.selectedItems[groupId].set(item, 1);
        }
    },

    removeProductItemFromSelection(groupId, item) {
        if (this.selectedItems[groupId] !== undefined) {
            this.selectedItems[groupId].delete(item);
        }
    },
    showBlockContainer(container) {
        const element = typeof container === 'string' ? document.getElementById(container) : container;
        if (element) {
            element.classList.remove('no-display');
            element.classList.remove('ignore-validate');
            element.style.display = '';
        }
    },

    hideBlockContainer(container) {
        const element = typeof container === 'string' ? document.getElementById(container) : container;
        if (element) {
            element.classList.add('no-display');
            element.classList.add('ignore-validate');
            element.style.display = 'none';
        }
    },
    displayPageGroup(container, additional) {
        const element = typeof container === 'string' ? document.getElementById(container) : container;
        if (!element) {
            return;
        }
        if (!additional) {
            additional = {};
        }
        const pageGroupContainer = element.closest('div.page_group_container');
        if (pageGroupContainer) {
            const activePageGroupId = this.activePageGroups.get(pageGroupContainer.id);
            if (activePageGroupId) {
                this.hideBlockContainer(activePageGroupId);
            }
            this.activePageGroups.set(pageGroupContainer.id, element.id);
        }
        this.showBlockContainer(element);
        const blockContainer = element.querySelector('div.block_reference');
        if (blockContainer && blockContainer.innerHTML === '') {
            let layoutHandle = '';
            const layoutHandleField = element.querySelector('input.layout_handle_pattern');
            if (layoutHandleField) {
                layoutHandle = layoutHandleField.value;
            }
            this.loadSelectBoxByType('block_reference', element, layoutHandle, additional);
        }
        this.loadSelectBoxByType('block_template', element, additional.selectedBlock, additional);
    },
    displayEntityChooser(type, chooser, additional) {
        if (!additional) {
            additional = {};
        }
        const chooserElement = document.getElementById(chooser);
        if (type === 'categories') {
            additional.url = '<?= $this->getCategoriesChooserUrl() ?>';
            const isAnchorInput = chooserElement.querySelector('input.is_anchor_only');
            additional.post_parameters = new Map([['is_anchor_only', isAnchorInput ? isAnchorInput.value : '']]);
        } else if (type === 'products') {
            additional.url = '<?= $this->getProductsChooserUrl() ?>';
            const productTypeInput = chooserElement.querySelector('input.product_type_id');
            additional.post_parameters = new Map([['product_type_id', productTypeInput ? productTypeInput.value : '']]);
        }
        if (chooser && additional) {
            this.displayChooser(chooser, additional);
        }
    },

    hideEntityChooser(chooser) {
        const chooserElement = document.getElementById(chooser);
        const chooserDiv = chooserElement ? chooserElement.querySelector('div.chooser') : null;
        if (chooserDiv) {
            chooserDiv.classList.add('no-display');
            chooserDiv.style.display = 'none';
        }
    },
    displayChooser(chooser, additional) {
        const chooserElement = document.getElementById(chooser);
        const chooserDiv = chooserElement ? chooserElement.querySelector('div.chooser') : null;
        if (!chooserDiv) return;

        const chooserContainer = chooserDiv.closest('div.chooser_container');
        const entitiesInput = chooserContainer ? chooserContainer.querySelector('input[type="text"].entities') : null;
        const entities = entitiesInput ? entitiesInput.value : '';

        const postParameters = new FormData();
        postParameters.append('selected', entities);

        let url = '';
        if (additional) {
            if (additional.url) url = additional.url;
            if (additional.post_parameters) {
                for (const [key, value] of additional.post_parameters) {
                    postParameters.append(key, value);
                }
            }
        }
        if (chooserDiv && url) {
            if (chooserDiv.innerHTML === '') {
                mahoFetch(url, {
                    method: 'POST',
                    body: postParameters
                })
                .then(data => {
                    if (data) {
                        chooserDiv.innerHTML = data;
                        chooserDiv.classList.remove('no-display');
                        chooserDiv.style.display = '';
                    }
                })
                .catch(() => {
                    alert('<?= $this->jsQuoteEscape(Mage::helper('widget')->__('Error occurs during loading chooser.')) ?>');
                });
            } else {
                chooserDiv.classList.remove('no-display');
                chooserDiv.style.display = '';
            }
        }
    },
    checkProduct(event) {
        const elm = event.memo.element;
        const container = event.target.closest('div.chooser').closest('div.chooser_container');
        const selectionId = container.id;
        const entitiesElm = container.querySelector('input[type="text"].entities');
        if (elm.checked) {
            this.addProductItemToSelection(selectionId, elm.value);
        } else {
            this.removeProductItemFromSelection(selectionId, elm.value);
        }
        if (entitiesElm && this.selectedItems[selectionId]) {
            entitiesElm.value = Array.from(this.selectedItems[selectionId].keys()).join(',');
        }
    },
    checkCategory(event) {
        const containerEl = event.target.closest('div.chooser_container');
        const inputEl = containerEl.querySelector('input[type=text]');
        inputEl.value = event.detail.selected.map((obj) => obj.id).join(',');
    },

    togglePageGroupChooser(element) {
        const chooser = element.closest('div.group_container').querySelector('div.chooser_container');
        if (element && chooser) {
            if (element.value === 'all') {
                chooser.classList.add('no-display');
                chooser.style.display = 'none';
            } else {
                chooser.classList.remove('no-display');
                chooser.style.display = '';
            }
        }
    },
    loadSelectBoxByType(type, element, value, additional) {
        if (!additional) {
            additional = {};
        }
        const containerElm = element.querySelector('div.'+type);
        if (element && containerElm) {
            let url = '';
            let selected = '';
            const parameters = new FormData();
            if (type === 'block_reference') {
                url = '<?= $this->getBlockChooserUrl() ?>';
                if (additional.selectedBlock) {
                    selected = additional.selectedBlock;
                }
                parameters.append('layout', value);
            } else if (type === 'block_template') {
                url = '<?= $this->getTemplateChooserUrl() ?>';
                if (additional.selectedTemplate) {
                    selected = additional.selectedTemplate;
                }
                parameters.append('block', value);
            }
            parameters.append('selected', selected);
            if (url) {
                mahoFetch(url, {
                    method: 'POST',
                    body: parameters
                })
                .then(data => {
                    if (data) {
                        containerElm.innerHTML = data;
                        const formElm = containerElm.querySelector('select, input[type="hidden"]');
                        if (formElm) {
                            const containerNameInput = element.querySelector('input.container_name');
                            if (containerNameInput) {
                                formElm.name = containerNameInput.value + '[' + formElm.name + ']';
                            }
                        }
                    }
                })
                .catch(() => {
                    alert('<?= $this->jsQuoteEscape(Mage::helper('widget')->__('Error occurs during loading chooser.')) ?>');
                });
            }
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    <?php foreach ($this->getPageGroups() as $pageGroup): ?>
        WidgetInstance.addPageGroup(<?= Mage::helper('core')->jsonEncode($pageGroup) ?>);
    <?php endforeach ?>

    document.addEventListener('product:changed', (event) => {
        WidgetInstance.checkProduct(event);
    });

    document.addEventListener('category:changed', (event) => {
        WidgetInstance.checkCategory(event);
    });
});
</script>
