<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_Template $this */
?>
<script type="text/javascript">
<?php $myBlock = $this->getLayout()->getBlock('user.roles.grid'); ?>
<?php if( is_object($myBlock) && $myBlock->getJsObjectName()): ?>
    const radioBoxes = new Map();
    let warning = false;
    const userRoles = new Map(Object.entries(<?= $myBlock->_getSelectedRoles(true) ?>));
    if (userRoles.size > 0) warning = true;
    const userRolesInput = document.getElementById('user_user_roles');
    if (userRolesInput) {
        userRolesInput.value = new URLSearchParams(userRoles).toString();
    }

    function registerUserRole(grid, element, checked) {
        if (checked) {
            userRoles.clear();
            userRoles.set(element.value, 0);
        } else {
            userRoles.delete(element.value);
        }
        const userRolesInput = document.getElementById('user_user_roles');
        if (userRolesInput) {
            userRolesInput.value = new URLSearchParams(userRoles).toString();
        }
        grid.reloadParams = {'user_roles[]': Array.from(userRoles.keys())};
    }

    function roleRowClick(grid, event) {
        const trElement = event.target.closest('tr');
        const isInput = event.target.tagName === 'INPUT';
        if (trElement) {
            const checkbox = trElement.querySelector('input');
            if (checkbox && !checkbox.checked) {
                const checked = isInput ? checkbox.checked : !checkbox.checked;
                if (checked && warning && radioBoxes.size > 0) {
                    if (!confirm('<?= $this->jsQuoteEscape($this->__('Warning!\r\nThis action will remove this user from already assigned role\r\nAre you sure?')) ?>')) {
                        checkbox.checked = false;
                        for (const [key, value] of radioBoxes) {
                            if (value.status === 1) {
                                value.object.checked = true;
                            }
                        }
                        return false;
                    }
                    warning = false;
                }
                const gridObject = <?= $myBlock->getJsObjectName() ?>;
                if (gridObject && gridObject.setCheckboxChecked) {
                    gridObject.setCheckboxChecked(checkbox, checked);
                }
            }
        }
    }

    function rolesRowInit(grid, row) {
        const rowElement = typeof row === 'string' ? document.getElementById(row) : row;
        const checkbox = rowElement ? rowElement.getElementsByClassName('radio')[0] : null;
        if (checkbox) {
            radioBoxes.set(checkbox.value, {'status': checkbox.checked ? 1 : 0, 'object': checkbox});
        }
    }

    const gridObject = <?= $myBlock->getJsObjectName() ?>;
    if (gridObject) {
        gridObject.rowClickCallback = roleRowClick;
        gridObject.initRowCallback = rolesRowInit;
        gridObject.checkboxCheckCallback = registerUserRole;

        if (gridObject.rows) {
            gridObject.rows.forEach(row => {
                rolesRowInit(gridObject, row);
            });
        }
    }
<?php endif ?>
</script>
