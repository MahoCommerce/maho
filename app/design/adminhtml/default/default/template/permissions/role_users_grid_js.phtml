<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_Template $this */
?>
<script type="text/javascript">
<?php $myBlock = $this->getLayout()->getBlock('roleUsersGrid'); ?>
<?php if( is_object($myBlock) && $myBlock->getJsObjectName() ): ?>
    const checkBoxes = new Map(Object.entries(<?= $myBlock->_getUsers(true) ?>));
    let warning = false;
    if (checkBoxes.size > 0) {
        warning = true;
    }
    const roleUserInput = document.getElementById('in_role_user');
    if (roleUserInput) {
        roleUserInput.value = new URLSearchParams(checkBoxes).toString();
    }

    function registerUserRole(grid, element, checked) {
        if (checked) {
            checkBoxes.set(element.value, 0);
        } else {
            checkBoxes.delete(element.value);
        }
        const roleUserInput = document.getElementById('in_role_user');
        if (roleUserInput) {
            roleUserInput.value = new URLSearchParams(checkBoxes).toString();
        }
        grid.reloadParams = {'in_role_user[]': Array.from(checkBoxes.keys())};
    }

    function roleUsersRowClick(grid, event) {
        const trElement = event.target.closest('tr');
        const isInput = event.target.tagName === 'INPUT';
        if (trElement) {
            const checkbox = trElement.querySelector('input');
            if (checkbox) {
                const checked = isInput ? !checkbox.checked : checkbox.checked;
                if (checked) {
                    if (confirm('<?= $this->jsQuoteEscape($this->__('Warning!\r\nThis action will remove this user from already assigned role\r\nAre you sure?')) ?>')) {
                        checkbox.checked = false;
                        checkBoxes.delete(checkbox.value);
                        if (typeof varienElementMethods !== 'undefined') {
                            varienElementMethods.setHasChanges(checkbox);
                        }
                    } else {
                        checkbox.checked = true;
                    }
                } else {
                    checkbox.checked = true;
                    checkBoxes.set(checkbox.value, true);
                }

                const roleUserInput = document.getElementById('in_role_user');
                if (roleUserInput) {
                    roleUserInput.value = new URLSearchParams(checkBoxes).toString();
                }
                grid.reloadParams = {'in_role_user[]': Array.from(checkBoxes.keys())};
            }
        }
    }

    function roleUsersRowInit(grid, row) {
        const rowElement = typeof row === 'string' ? document.getElementById(row) : row;
        const checkbox = rowElement ? rowElement.getElementsByClassName('checkbox')[0] : null;
        if (checkbox) {
            if (checkbox.checked) {
                checkBoxes.set(checkbox.value, checkbox.checked);
            } else {
                checkBoxes.delete(checkbox.value);
            }

            const roleUserInput = document.getElementById('in_role_user');
            if (roleUserInput) {
                roleUserInput.value = new URLSearchParams(checkBoxes).toString();
            }
            grid.reloadParams = {'in_role_user[]': Array.from(checkBoxes.keys())};
        }
    }

    function massSelectUsers(allCheckbox) {
        if (!allCheckbox.checked && checkBoxes.size > 0) {
            if (!confirm('<?= $this->jsQuoteEscape($this->__('Warning!\r\nThis action will remove those users from already assigned roles\r\nAre you sure?')) ?>')) {
                allCheckbox.checked = false;
                return false;
            }
        }

        const gridObject = <?= $myBlock->getJsObjectName() ?>;
        if (gridObject && gridObject.rows) {
            gridObject.rows.forEach(row => {
                const rowElement = typeof row === 'string' ? document.getElementById(row) : row;
                const checkbox = rowElement ? rowElement.getElementsByClassName('checkbox')[0] : null;
                if (checkbox) {
                    checkbox.checked = allCheckbox.checked;
                    roleUsersRowInit(gridObject, row);
                }
            });
        }
    }

    const gridObject = <?= $myBlock->getJsObjectName() ?>;
    if (gridObject) {
        gridObject.rowClickCallback = roleUsersRowClick;
        gridObject.initRowCallback = roleUsersRowInit;
        gridObject.checkboxCheckCallback = registerUserRole;
        gridObject.checkCheckboxes = massSelectUsers;

        if (gridObject.rows) {
            gridObject.rows.forEach(row => {
                roleUsersRowInit(gridObject, row);
            });
        }
    }

    const roleUserOldInput = document.getElementById('in_role_user_old');
    const roleUserInput = document.getElementById('in_role_user');
    if (roleUserOldInput && roleUserInput) {
        roleUserOldInput.value = roleUserInput.value;
    }
<?php endif ?>
</script>
