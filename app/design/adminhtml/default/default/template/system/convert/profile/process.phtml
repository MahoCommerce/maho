<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2025 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_System_Convert_Profile_Run $this */
?>
<style type="text/css" >
    ul { list-style-type:none; padding:0; margin:0; }
    li { margin-left:0; border:1px solid #ccc; margin:2px; padding:2px 2px 2px 2px; font:normal 12px sans-serif; }
    img { margin-right:5px; }
</style>
<script type="text/javascript">
    var FORM_KEY = "<?= $this->getFormKey() ?>";
</script>
    <ul>
        <li>
        <?php if ($this->getProfile()->getId()):?>
            <img src="<?= $this->getSkinUrl('images/note_msg_icon.gif') ?>" class="v-middle" style="margin-right:5px"/>
            <?= $this->__("Starting profile execution, please wait...") ?>
            </li>
            <li style="background-color:#FFD;">
            <img src="<?= $this->getSkinUrl('images/fam_bullet_error.gif') ?>" class="v-middle" style="margin-right:5px"/>
            <?= $this->__("Warning: Please do not close the window during importing/exporting data") ?>
        <?php else: ?>
            <img src="<?= $this->getSkinUrl('images/error_msg_icon.gif') ?>" class="v-middle" style="margin-right:5px"/>
            <?= $this->__("No profile loaded...") ?>
        <?php endif ?>
        </li>
    </ul>

    <?php if ($this->getProfile()->getId()):?>
    <ul id="profileRows">
        <?php foreach ($this->getExceptions() as $exceptionInfo):?>
            <li style="<?= $exceptionInfo['style'] ?>">
                <img src="<?= $exceptionInfo['src'] ?>" class="v-middle"/>
                <?= $exceptionInfo['message'] ?>
                <?php if ($exceptionInfo['position']):?>
                    <small>(<?= $exceptionInfo['position'] ?>)</small>
                <?php endif ?>
            </li>
        <?php endforeach ?>
        <?php if($this->getProfile()->getEntityType() == 'product' && $this->getProfile()->getDirection() == 'import'):?>
            <li id="liBeforeFinish" style="background-color:#FFD; display:none;">
                <img src="<?php echo $this->getSkinUrl('images/fam_bullet_error.gif');?>" class="v-middle" style="margin-right:5px"/>
                <?php echo $this->__("Please wait while the indexes are being refreshed.");?>
                <img id="before-finish-wait-img" src="<?php echo $this->getSkinUrl('images/rule-ajax-loader.gif');?>" class="v-middle" style="margin-right:5px"/>
            </li>
        <?php endif ?>
            <li id="liFinished" style="display:none;">
            <img src="<?php echo $this->getSkinUrl('images/note_msg_icon.gif');?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("Finished profile execution.");?>
            </li>
            </ul>
            <?php if ($batchId = $this->getBatchModel()->getId()):?>
                <?php if ($this->getBatchModelHasAdapter()):?>
                <script type="text/javascript">
                    var countOfStartedProfiles = 0;
                    var countOfUpdated = 0;
                    var countOfError = 0;
                    var importData = [];
                    var totalRecords = <?= $this->getBatchItemsCount() ?>;
                    var config= <?= $this->getBatchConfigJson() ?>;
                </script>
                <script type="text/javascript">
                    function addImportData(data) {
                        importData.push(data);
                    }

                    function execImportData() {
                        if (importData.length == 0) {
                            const updatedRowsImg = document.getElementById("updatedRows_img");
                            if (updatedRowsImg) {
                                updatedRowsImg.src = config.styles.message.icon;
                            }
                            const updatedRows = document.getElementById("updatedRows");
                            if (updatedRows) {
                                updatedRows.style.backgroundColor = config.styles.message.bg;
                            }
                            const liFinished = document.getElementById("liFinished");
                            liFinished.insertAdjacentHTML('beforebegin', config.tpl.evaluate({
                                style: "background-color:"+config.styles.message.bg,
                                image: config.styles.message.icon,
                                text: config.tplSccTxt.evaluate({updated:(countOfUpdated-countOfError)}),
                                id: "updatedFinish"
                            }));

                            const liBeforeFinish = document.getElementById("liBeforeFinish");
                            if (liBeforeFinish) {
                                liFinished.insertAdjacentElement('beforebegin', liBeforeFinish);
                                liBeforeFinish.style.display = 'block';
                            }

                            const formData = new FormData();
                            formData.append('form_key', FORM_KEY);

                            mahoFetch("<?= $this->getUrl('*/*/batchFinish', ['id' => $batchId]) ?>", {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => {
                                let responseData = response;
                                if (typeof response === 'string') {
                                    try {
                                        responseData = JSON.parse(response);
                                    } catch (e) {
                                        responseData = {};
                                    }
                                }

                                if (responseData.error) {
                                    const liFinished = document.getElementById("liFinished");
                                    liFinished.insertAdjacentHTML('beforebegin', config.tpl.evaluate({
                                        style: "background-color:"+config.styles.error.bg,
                                        image: config.styles.error.icon,
                                        text: escapeHtml(responseData.error),
                                        id: "error-finish"
                                    }));
                                }

                                const beforeFinishImg = document.getElementById("before-finish-wait-img");
                                if (beforeFinishImg) {
                                    beforeFinishImg.style.display = 'none';
                                }

                                document.getElementById('liFinished').style.display = 'block';
                            })
                            .catch(error => {
                                console.error('Batch finish error:', error);
                                document.getElementById('liFinished').style.display = 'block';
                            });
                        } else {
                            sendImportData(importData.shift());
                        }
                    }

                    function sendImportData(data) {
                        if (!config.tpl) {
                            config.tpl = new Template(config.template.replace(/#{(\w+)}/g, '{{$1}}'), Template.HANDLEBARS_PATTERN);
                            config.tplTxt = new Template(config.text.replace(/#{(\w+)}/g, '{{$1}}'), Template.HANDLEBARS_PATTERN);
                            config.tplSccTxt = new Template(config.successText.replace(/#{(\w+)}/g, '{{$1}}'), Template.HANDLEBARS_PATTERN);
                        }
                        if (!document.getElementById("updatedRows")) {
                            const liFinished = document.getElementById("liFinished");
                            liFinished.insertAdjacentHTML('beforebegin', config.tpl.evaluate({
                                style: "background-color: #FFD;",
                                image: config.styles.loader,
                                text: config.tplTxt.evaluate({updated:countOfUpdated, percent:getPercent()}),
                                id: "updatedRows"
                            }));
                        }
                        countOfStartedProfiles++;
                        if (!data.form_key) {
                            data.form_key = FORM_KEY;
                        }

                        const formData = new FormData();
                        Object.entries(data).forEach(([key, value]) => {
                            if (Array.isArray(value)) {
                                value.forEach(item => formData.append(key, item));
                            } else {
                                formData.append(key, value);
                            }
                        });

                        mahoFetch("<?= $this->getUrl('*/*/batchRun') ?>", {
                          method: 'POST',
                          body: formData
                        })
                        .then(response => {
                            countOfStartedProfiles --;
                            countOfUpdated += data["rows[]"].length;

                            let responseData = response;
                            if (typeof response === 'object') {
                                addProfileRow(responseData);
                            } else {
                                try {
                                    responseData = JSON.parse(response);
                                    addProfileRow(responseData);
                                } catch (e) {
                                    const updatedRows = document.getElementById("updatedRows");
                                    updatedRows.insertAdjacentHTML('beforebegin', config.tpl.evaluate({
                                        style: "background-color:"+config.styles.error.bg,
                                        image: config.styles.error.icon,
                                        text: escapeHtml(response),
                                        id: "error-" + countOfStartedProfiles
                                    }));
                                    countOfError += data["rows[]"].length;
                                }
                            }
                            execImportData();
                        })
                        .catch(error => {
                            countOfStartedProfiles --;
                            console.error('Batch run error:', error);
                            countOfError += data["rows[]"].length;
                            execImportData();
                        });
                    }

                    function getPercent() {
                        return Math.ceil((countOfUpdated/totalRecords)*1000)/10;
                    }

                    function addProfileRow(data) {
                        if (data.errors.length > 0) {
                            for (var i=0, length=data.errors.length; i<length; i++) {
                                const updatedRows = document.getElementById("updatedRows");
                                updatedRows.insertAdjacentHTML('beforebegin', config.tpl.evaluate({
                                    style: "background-color:"+config.styles.error.bg,
                                    image: config.styles.error.icon,
                                    text: data.errors[i],
                                    id: "id-" + (countOfUpdated + i + 1)
                                }));
                                countOfError ++;
                            }
                        }
                        const updatedRowsStatus = document.getElementById("updatedRows_status");
                        if (updatedRowsStatus) {
                            updatedRowsStatus.innerHTML = config.tplTxt.evaluate({updated:countOfUpdated, percent:getPercent()});
                        }
                    }
                </script>
                <?php $importData = $this->getImportData();?>
                <script type="text/javascript">
                    <?php foreach ($importData as  $importValue):?>
                    addImportData(<?= $this->jsonEncode($importValue) ?>);
                    <?php endforeach ?>
                    execImportData();
                </script>
                <?php endif ?>
            <?php endif ?>
            <?php if ($this->getShowFinished()):?>
                <script type="text/javascript">document.getElementById('liFinished').style.display = 'block';</script>
            <?php endif ?>
   <?php endif ?>
