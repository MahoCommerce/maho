<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_System_Config_Edit $this */
?>

<div class="content-header">
    <table cellspacing="0">
        <tr>
            <td>
                <h3<?php if($this->getHeaderCss()): ?> class="<?= $this->getHeaderCss()?>"<?php endif ?>><?= Mage::helper('adminhtml')->__($this->getTitle()) ?></h3>
            </td>
            <td class="form-buttons"><?= $this->getSaveButtonHtml() ?></td>
         </tr>
    </table>
</div>
<form action="<?= $this->getSaveUrl() ?>" method="post" id="config_edit_form" enctype="multipart/form-data">
    <?= $this->getBlockHtml('formkey') ?>
    <?= $this->getChildHtml('form') ?>
</form>
<script type="text/javascript">
const configFormHandler = {
    validator: {
        options: {
            onFormValidate: function(result, form) {
                if (result) {
                    document.querySelectorAll('.requires').forEach(element => {
                        const scopeElement = adminSystemConfig.getScopeElement(element);
                        if (!scopeElement || !scopeElement.checked) {
                            element.disabled = false;
                        }
                    });
                }
            }
        }
    }
};

const adminSystemConfig = {
    // Cache for parent elements to avoid repeated DOM traversal
    elementCache: new WeakMap(),

    getUp: function(element, tag) {
        element = typeof element === 'string' ? document.getElementById(element) : element;
        if (!element) return null;

        if (!this.elementCache.has(element)) {
            this.elementCache.set(element, {});
        }
        const cache = this.elementCache.get(element);

        if (!cache[tag]) {
            cache[tag] = element.closest(tag);
        }
        return cache[tag];
    },

    getUpTd: function(element) {
        return this.getUp(element, 'td');
    },

    getUpTr: function(element) {
        return this.getUp(element, 'tr');
    },

    getScopeElement: function(element) {
        element = typeof element === 'string' ? document.getElementById(element) : element;
        if (!element) return null;

        if (!element.scopeElement) {
            const nameAttr = element.getAttribute('name');
            if (nameAttr) {
                const scopeElementName = nameAttr.replace(/\[value\]$/, '[inherit]');
                const tr = this.getUpTr(element);
                element.scopeElement = tr ? tr.querySelector(`input[name="${scopeElementName}"]`) : null;
            }
            if (!element.scopeElement) {
                element.scopeElement = false;
            }
        }
        return element.scopeElement;
    },

    getDeleteElement: function(element) {
        element = typeof element === 'string' ? document.getElementById(element) : element;
        if (!element) return null;

        if (!element.deleteElement) {
            const nameAttr = element.getAttribute('name');
            if (nameAttr) {
                const td = this.getUpTd(element);
                element.deleteElement = td ? td.querySelector(`input[name="${nameAttr}[delete]"]`) : null;
            }
            if (!element.deleteElement) {
                element.deleteElement = false;
            }
        }
        return element.deleteElement;
    },

    mapClasses: function(element, full, callback, classPrefix = 'shared') {
        if (!element || !element.classList) return;

        Array.from(element.classList).forEach(className => {
            if (className.indexOf(classPrefix + '-') === 0 ||
                (full && className.indexOf(classPrefix + '_') === 0)) {
                callback(className);
            }
        });
    },

    onchangeSharedElement: function(event) {
        const element = event.target;
        adminSystemConfig.mapClasses(element, true, function(className) {
            document.querySelectorAll('.' + className).forEach(el => {
                if (element === el) {
                    return;
                }

                const tagName = el.tagName.toLowerCase();
                if (tagName === 'input' && el.getAttribute('type') === 'file') {
                    // File inputs need special handling - recreate element
                    const newEl = el.cloneNode(true);
                    el.parentNode.replaceChild(newEl, el);
                    newEl.addEventListener('change', adminSystemConfig.onchangeSharedElement);
                } else {
                    // Remove existing listener to avoid duplicates
                    el.removeEventListener('change', adminSystemConfig.onchangeSharedElement);

                    if (tagName === 'input' && el.getAttribute('type') === 'checkbox') {
                        if (el.checked !== element.checked) {
                            el.click();
                        }
                    } else if (tagName === 'select') {
                        Array.from(element.options).forEach(option => {
                            const relatedOption = el.querySelector(`option[value="${option.value}"]`);
                            if (relatedOption) {
                                relatedOption.selected = option.selected;
                            }
                        });
                    } else {
                        el.value = element.value;
                    }

                    if (el.requiresObj) {
                        el.requiresObj.indicateEnabled();
                    }

                    // Trigger change event
                    el.dispatchEvent(new Event('change', { bubbles: true }));
                    el.addEventListener('change', adminSystemConfig.onchangeSharedElement);
                }
            });
        });
    },

    checkRequired: function(element, callback) {
        const tagName = this.tagName.toLowerCase();

        if (tagName !== 'fieldset') {
            const tr = adminSystemConfig.getUpTr(this);
            if (tr && getComputedStyle(tr).display !== 'none') {

                if (this.classList.contains('not-required')) {
                    return;
                }

                let typeAttr = null;
                if (tagName === 'input') {
                    typeAttr = this.getAttribute('type').toLowerCase();
                }

                let valueIsEmpty = false;
                const scopeElement = adminSystemConfig.getScopeElement(this);

                if (!scopeElement || !scopeElement.checked) {
                    if (typeAttr === 'file') {
                        const deleteUploadedElement = adminSystemConfig.getDeleteElement(this);
                        valueIsEmpty = (!deleteUploadedElement && this.value === '') ||
                                     (deleteUploadedElement && deleteUploadedElement.checked);
                    }

                    valueIsEmpty = valueIsEmpty ||
                        ((typeAttr === 'text' || typeAttr === 'password') && this.value === '') ||
                        (tagName === 'select' && this.getAttribute('multiple') !== null && this.selectedOptions.length === 0) ||
                        (tagName === 'select' && this.getAttribute('multiple') === null && this.value === '');
                }

                if (valueIsEmpty) {
                    if (element.value != 0) {
                        element.value = 0;
                        element.dispatchEvent(new Event('change', { bubbles: true }));
                    }
                    element.disabled = true;
                }
            }
        } else {
            this.querySelectorAll('input,select').forEach(inputElement => {
                adminSystemConfig.checkRequired.call(inputElement, element, callback);
            });
        }
        callback(this);
    }
};

// Initialize shared elements
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.shared').forEach(element => {
        element.addEventListener('change', adminSystemConfig.onchangeSharedElement);

        // Scope should be shared together with the field
        const scopeElement = adminSystemConfig.getScopeElement(element);
        if (scopeElement) {
            adminSystemConfig.mapClasses(element, false, function(className) {
                scopeElement.classList.add('shared_scope-' + className.substr(7));
            });
            scopeElement.addEventListener('change', adminSystemConfig.onchangeSharedElement);
        }

        // File fields should share deletion
        if (element.tagName.toLowerCase() === 'input' && element.getAttribute('type') === 'file') {
            const deleteUploadedElement = adminSystemConfig.getDeleteElement(element);
            if (deleteUploadedElement) {
                adminSystemConfig.mapClasses(element, false, function(className) {
                    deleteUploadedElement.classList.add('shared_delete-' + className.substr(7));
                });
                deleteUploadedElement.addEventListener('change', adminSystemConfig.onchangeSharedElement);
            }
        }

        // Process situation when control is complex
        adminSystemConfig.mapClasses(element, true, function(className) {
            const td = adminSystemConfig.getUpTd(element);
            if (td) {
                const controls = td.querySelectorAll('.' + className);
                if (controls.length < 2) {
                    return;
                }

                let counter = 0;
                controls.forEach(controlElement => {
                    controlElement.classList.remove(className);
                    controlElement.classList.add('shared_' + counter + className.substr(6));
                    counter++;
                });
            }
        });
    });

    // Initialize requires elements
    document.querySelectorAll('.requires').forEach(element => {
        const eventObj = {
            element: element,
            requires: [],
            callback: function(required) {},

            checkRequirements: function() {
                const scopeElement = adminSystemConfig.getScopeElement(eventObj.element);
                if (!scopeElement || !scopeElement.checked) {
                    eventObj.element.disabled = false;
                    eventObj.requires.forEach(required => {
                        adminSystemConfig.checkRequired.call(required, eventObj.element, eventObj.callback);
                    });
                }
            },

            keydownCheckRequirements: function() {
                setTimeout(eventObj.checkRequirements, 1);
            },

            bindCheckingObserver: function(element) {
                if (element.tagName.toLowerCase() === 'fieldset') {
                    element.querySelectorAll('input,select').forEach(subElement => {
                        eventObj.bindCheckingObserver(subElement);
                    });
                } else {
                    const scopeElement = adminSystemConfig.getScopeElement(element);
                    if (scopeElement) {
                        scopeElement.addEventListener('click', eventObj.checkRequirements);
                    }
                    element.addEventListener('change', eventObj.checkRequirements);
                    element.addEventListener('keydown', eventObj.keydownCheckRequirements);
                }
            },

            indicateEnabled: function() {
                const tr = adminSystemConfig.getUpTr(eventObj.element);
                if (tr) {
                    const labelElement = tr.querySelector('td.label label');
                    if (labelElement) {
                        if (eventObj.element.value == 1) {
                            labelElement.classList.add('enabled');
                        } else {
                            labelElement.classList.remove('enabled');
                        }
                    }
                }
            }
        };

        // Fill eventObj with required elements
        adminSystemConfig.mapClasses(element, false, function(className) {
            const requiredElement = document.getElementById(className.substr(9));
            if (requiredElement) {
                eventObj.requires.push(requiredElement);
            }
        }, 'requires');

        element.requiresObj = eventObj;

        // Replace "Use Default" action with checking requirements
        const scopeElement = adminSystemConfig.getScopeElement(element);
        if (scopeElement) {
            // Remove existing listeners
            const clonedScope = scopeElement.cloneNode(true);
            scopeElement.parentNode.replaceChild(clonedScope, scopeElement);

            clonedScope.addEventListener('click', function(event) {
                const previousElement = clonedScope.parentNode.previousElementSibling;
                if (previousElement && typeof toggleValueElements === 'function') {
                    toggleValueElements(clonedScope, previousElement);
                }
                eventObj.checkRequirements();
            });
        }

        // Bind events
        eventObj.requires.forEach(required => {
            eventObj.bindCheckingObserver(required);
        });

        element.addEventListener('change', eventObj.indicateEnabled);
        eventObj.checkRequirements();
        eventObj.indicateEnabled();
    });
});

// Set up form validation
if (typeof varienForm !== 'undefined') {
    const configForm = new varienForm('config_edit_form');
    configForm.validator.options.onFormValidate = configFormHandler.validator.options.onFormValidate;
}
</script>
