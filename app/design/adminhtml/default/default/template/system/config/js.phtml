<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2022-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_Template $this */
?>
<script type="text/javascript">
class OriginModel {
    constructor() {
        this.reload = false;
        this.regionsUrl = "<?= $this->getUrl('*/json/countryRegion') ?>";
        this.bindCountryRegionRelation();
    }

    bindCountryRegionRelation(parentId) {
        let countryElements;
        if (parentId) {
            countryElements = document.querySelectorAll('#' + parentId + ' .countries');
        } else {
            countryElements = document.querySelectorAll('.countries');
        }

        countryElements.forEach(element => {
            element.addEventListener('change', (event) => this.reloadRegionField(event));
            this.initRegionField(element);

            const inheritElement = document.getElementById(element.id + '_inherit');
            if (inheritElement) {
                inheritElement.addEventListener('change', (event) => this.enableRegionZip(event));
            }
        });
    }

    enableRegionZip(event) {
        this.reload = true;
        const countryElement = event.target;
        if (countryElement && countryElement.id && !countryElement.checked) {
            const regionElement = document.getElementById(countryElement.id.replace(/country_id/, 'region_id'));
            const zipElement = document.getElementById(countryElement.id.replace(/country_id/, 'postcode'));
            if (regionElement && regionElement.checked) {
                regionElement.click();
            }
            if (zipElement && zipElement.checked) {
                zipElement.click();
            }
        }
    }

    initRegionField(element) {
        const countryElement = element;
        if (countryElement && countryElement.id) {
            const regionElement = document.getElementById(countryElement.id.replace(/country_id/, 'region_id'));
            if (regionElement) {
                this.regionElement = regionElement;
                const url = this.regionsUrl + 'parent/' + countryElement.value;
                this.loadRegions(url);
            }
        }
    }

    reloadRegionField(event) {
        this.reload = true;
        const countryElement = event.target;
        if (countryElement && countryElement.id) {
            const regionElement = document.getElementById(countryElement.id.replace(/country_id/, 'region_id'));
            if (regionElement) {
                this.regionElement = regionElement;
                const url = this.regionsUrl + 'parent/' + countryElement.value;
                this.loadRegions(url);
            }
        }
    }

    async loadRegions(url) {
        try {
            const response = await mahoFetch(url);
            const data = await response.json();
            this.refreshRegionField(data);
        } catch (error) {
            console.error('Error loading regions:', error);
        }
    }

    refreshRegionField(data) {
        if (data) {
            const disabled = this.regionElement.disabled;
            if (data.length) {
                let html = `<select name="${this.regionElement.name}" id="${this.regionElement.id}" class="required-entry select" title="${this.regionElement.title}"${disabled ? ' disabled' : ''}>`;

                data.forEach(region => {
                    if (region.label) {
                        const selected = (this.regionElement.value &&
                            (this.regionElement.value === region.value || this.regionElement.value === region.label))
                            ? ' selected' : '';
                        html += `<option value="${region.value}"${selected}>${region.label}</option>`;
                    }
                });
                html += '</select>';

                const parentNode = this.regionElement.parentNode;
                const regionElementId = this.regionElement.id;
                parentNode.innerHTML = html;
                this.regionElement = document.getElementById(regionElementId);
            } else if (this.reload) {
                const html = `<input type="text" name="${this.regionElement.name}" id="${this.regionElement.id}" class="input-text" title="${this.regionElement.title}"${disabled ? ' disabled' : ''}>`;
                const parentNode = this.regionElement.parentNode;
                const regionElementId = this.regionElement.id;
                parentNode.innerHTML = html;
                this.regionElement = document.getElementById(regionElementId);
            }
        }
    }
}

const originAddress = new OriginModel();

class PerPageModel {
    constructor() {
        this.listModeElement = document.getElementById('catalog_frontend_list_mode');
        if (this.listModeElement) {
            this.gridValuesElement = document.getElementById('catalog_frontend_grid_per_page_values');
            this.listValuesElement = document.getElementById('catalog_frontend_list_per_page_values');
            this.listElement = document.getElementById('catalog_frontend_list_per_page');
            this.gridElement = document.getElementById('catalog_frontend_grid_per_page');

            this.gridOptions = [];
            this.listOptions = [];

            this.refreshPerPageSelect();
            this.bindListModeChange();
        }
        this.addValidate();
    }

    bindListModeChange() {
        this.listModeElement.addEventListener('change', () => this.refreshPerPageSelect());
    }

    refreshPerPageSelect() {
        if (this.listModeElement.value !== '') {
            if (this.listModeElement.value === 'grid') {
                this.listElement.parentElement.style.display = 'none';
                this.listValuesElement.parentElement.style.display = 'none';

                this.gridElement.parentElement.style.display = '';
                this.gridValuesElement.parentElement.style.display = '';
            } else if (this.listModeElement.value === 'grid-list' || this.listModeElement.value === 'list-grid') {
                this.listElement.parentElement.style.display = '';
                this.listValuesElement.parentElement.style.display = '';

                this.gridElement.parentElement.style.display = '';
                this.gridValuesElement.parentElement.style.display = '';
            } else if (this.listModeElement.value === 'list') {
                this.listElement.parentElement.style.display = '';
                this.listValuesElement.parentElement.style.display = '';

                this.gridElement.parentElement.style.display = 'none';
                this.gridValuesElement.parentElement.style.display = 'none';
            }
        }
    }

    addValidate() {
        if (typeof Validation !== 'undefined') {
            Validation.add('validate-per-page-value-list', '<?= $this->jsQuoteEscape($this->__('Please enter a valid value, ex: 10,20,30')) ?>', function(v) {
                const isEmptyValid = Validation.get('IsEmpty');
                let isValid = !isEmptyValid.test(v);
                const values = v.split(',');
                for (let i = 0; i < values.length; i++) {
                    if (!/^[0-9]+$/.test(values[i])) {
                        isValid = false;
                    }
                }
                return isValid;
            });

            Validation.add('validate-per-page-value', '<?= $this->jsQuoteEscape($this->__('Please enter a valid value from list')) ?>', function(v, elm) {
                const isEmptyValid = Validation.get('IsEmpty');
                if (isEmptyValid.test(v)) {
                    return false;
                }
                const valuesElement = document.getElementById(elm.id + '_values');
                const values = valuesElement.value.split(',');
                return values.indexOf(v) !== -1;
            });
        }
    }
}

const perPageSelect = new PerPageModel();
</script>
