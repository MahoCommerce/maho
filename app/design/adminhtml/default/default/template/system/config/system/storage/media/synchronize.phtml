<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2022-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_System_Config_System_Storage_Media_Synchronize $this */
?>

<script type="text/javascript">
let defaultValues = {};
let allowedStorages = [];
let statusUpdater = null;

function getElementById(id) {
    return document.getElementById(id);
}

// Custom validation handler
function validateSynchronization() {
    const storage = getConnectionName(
        getElementById('system_media_storage_configuration_media_storage').value,
        getElementById('system_media_storage_configuration_media_database').value
    );
    return allowedStorages.includes(storage);
}

// Initialize default values and allowed storages
document.addEventListener('DOMContentLoaded', function() {
    const storageElement = getElementById('system_media_storage_configuration_media_storage');
    const databaseElement = getElementById('system_media_storage_configuration_media_database');

    if (storageElement && databaseElement) {
        defaultValues['system_media_storage_configuration_media_storage'] = storageElement.value;
        defaultValues['system_media_storage_configuration_media_database'] = databaseElement.value;

        addAllowedStorage(storageElement.value, databaseElement.value);
    }

    <?php $syncStorageParams = $this->getSyncStorageParams() ?>
    addAllowedStorage(<?= $syncStorageParams['storage_type'] ?>, '<?= $syncStorageParams['connection_name'] ?>');

    disableStorageSelection();
    disableSyncButton();
    checkStatus();

    // Add event listeners
    if (storageElement) {
        storageElement.addEventListener('change', checkButtonState);
    }
    if (databaseElement) {
        databaseElement.addEventListener('change', checkButtonState);
    }
});

function getConnectionName(storageType, connection) {
    if (storageType == 0) {
        return storageType;
    } else if (connection !== '') {
        return storageType + '_' + connection;
    }
    return '';
}

function addAllowedStorage(storageType, connection) {
    const storage = getConnectionName(storageType, connection);

    if (storage !== '' && !allowedStorages.includes(storage)) {
        allowedStorages.push(storage);
    }
}

function checkButtonState(event) {
    const storageElement = getElementById('system_media_storage_configuration_media_storage');
    const databaseElement = getElementById('system_media_storage_configuration_media_database');

    if (!storageElement || !databaseElement) return;

    const defaultStorage = getConnectionName(
        defaultValues['system_media_storage_configuration_media_storage'],
        defaultValues['system_media_storage_configuration_media_database']
    );

    const storage = getConnectionName(storageElement.value, databaseElement.value);

    if (defaultStorage !== storage) {
        enableSyncButton();
    } else {
        disableSyncButton();
    }
}

function enableStorageSelection() {
    const storageElement = getElementById('system_media_storage_configuration_media_storage');
    const databaseElement = getElementById('system_media_storage_configuration_media_database');

    if (storageElement) storageElement.disabled = false;
    if (databaseElement) databaseElement.disabled = false;
}

function disableStorageSelection() {
    const storageElement = getElementById('system_media_storage_configuration_media_storage');
    const databaseElement = getElementById('system_media_storage_configuration_media_database');

    if (storageElement) storageElement.disabled = true;
    if (databaseElement) databaseElement.disabled = true;
}

function enableSyncButton() {
    const syncButton = getElementById('synchronize_button');
    if (syncButton) {
        syncButton.disabled = false;
        syncButton.classList.remove('disabled');
    }
}

function disableSyncButton() {
    const syncButton = getElementById('synchronize_button');
    if (syncButton) {
        syncButton.disabled = true;
        syncButton.classList.add('disabled');
    }
}

function checkStatus() {
    if (statusUpdater) {
        clearInterval(statusUpdater);
    }

    statusUpdater = setInterval(async () => {
        try {
            const response = await mahoFetch('<?= $this->getAjaxStatusUpdateUrl() ?>', {
                method: 'GET'
            });

            const data = await response.json();

            if (data.state === '<?= Mage_Core_Model_File_Storage_Flag::STATE_RUNNING ?>' && data.message) {
                const syncSpan = getElementById('sync_span');
                const syncMessageSpan = getElementById('sync_message_span');

                if (syncSpan && syncSpan.classList.contains('no-display')) {
                    syncSpan.classList.remove('no-display');
                    if (syncMessageSpan) {
                        syncMessageSpan.textContent = data.message;
                    }
                }
            } else {
                clearInterval(statusUpdater);
                statusUpdater = null;
                enableStorageSelection();

                const syncSpan = getElementById('sync_span');
                if (syncSpan) {
                    syncSpan.classList.add('no-display');
                }

                if (data.state === '<?= Mage_Core_Model_File_Storage_Flag::STATE_NOTIFIED ?>') {
                    if (data.html && data.html !== '') {
                        document.querySelectorAll('div.notification-global').forEach(element => {
                            if (!element.classList.contains('notification-global-notice')) {
                                element.style.display = 'none';
                            }
                        });

                        const anchorContent = getElementById('anchor-content');
                        if (anchorContent) {
                            anchorContent.insertAdjacentHTML('beforebegin', data.html);
                        }
                    }

                    if (data.has_errors) {
                        enableSyncButton();
                    } else {
                        const storageElement = getElementById('system_media_storage_configuration_media_storage');
                        const databaseElement = getElementById('system_media_storage_configuration_media_database');
                        if (storageElement && databaseElement) {
                            addAllowedStorage(storageElement.value, databaseElement.value);
                        }
                    }
                }
            }
        } catch (error) {
            console.error('Status check failed:', error);
        }
    }, 5000);
}

async function synchronize() {
    // Hide validation advice if exists
    const validationInput = getElementById('synchronize-validation-input');
    if (validationInput && !validateSynchronization()) {
        console.error('<?= $this->jsQuoteEscape($this->__('Synchronization is required.')) ?>');
        return;
    }

    const storageElement = getElementById('system_media_storage_configuration_media_storage');
    const databaseElement = getElementById('system_media_storage_configuration_media_database');

    if (!storageElement || !databaseElement) return;

    const params = new URLSearchParams({
        storage: storageElement.value,
        connection: databaseElement.value
    });

    try {
        await mahoFetch('<?= $this->getAjaxSyncUrl() ?>', {
            method: 'POST',
            body: params
        });

        setTimeout(() => checkStatus(), 2011);

        disableStorageSelection();
        disableSyncButton();
    } catch (error) {
        console.error('Synchronization failed:', error);
    }
}
</script>

<?= $this->getButtonHtml() ?><span class="sync-indicator no-display" id="sync_span"><img alt="Synchronize" style="margin:0 5px" src="<?= $this->getSkinUrl('images/process_spinner.gif') ?>"/><span id="sync_message_span">
<input type="hidden" id="synchronize-validation-input" class="required-synchronize no-display"/>
