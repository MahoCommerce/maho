<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_System_Email_Template_Edit $this */
?>
<div class="content-header">
    <h3><?= $this->getHeaderText() ?></h3>
    <p class="content-buttons form-buttons">
                <?= $this->getBackButtonHtml() ?>
                <?= $this->getResetButtonHtml() ?>
                <?php if($this->getEditMode()): ?>
                <?= $this->getDeleteButtonHtml() ?>
                <?php endif ?>
                <?php if(!$this->isTextType()): ?>
                <?= $this->getToPlainButtonHtml() ?>
                <?= $this->getToHtmlButtonHtml() ?>
                <?php endif ?>
                <?= $this->getPreviewButtonHtml() ?>
                <?= $this->getSaveButtonHtml() ?>
    </p>
</div>
<?php if (!$this->getEditMode()): ?>
<form action="<?= $this->getLoadUrl() ?>" method="post" id="email_template_load_form">
    <?= $this->getBlockHtml('formkey') ?>
    <div class="entry-edit">
        <div class="entry-edit-head">
            <h4>
            <?= Mage::helper('adminhtml')->__('Load default template') ?>
            </h4>
            <div class="form-buttons"></div>
        </div>
        <div class="fieldset">
            <table class="form-list" cellspacing="0">
                <tbody>
                    <tr>
                        <td class="label">
                            <label for="template_select">
                            <?= Mage::helper('adminhtml')->__('Template') ?>
                            <span class="required">*</span>
                            </label>
                        </td>
                        <td class="value">
                            <select id="template_select" name="code" class="select required-entry">
                                <?php foreach ($this->getTemplateOptions() as $_option): ?>
                                <option value="<?= $_option['value'] ?>"<?= $this->getOrigTemplateCode() == $_option['value'] ? ' selected="selected"' : '' ?>><?= $_option['label'] ?></option>
                                <?php endforeach ?>
                            </select>
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td class="label">
                            <label for="locale_select">
                            <?= Mage::helper('adminhtml')->__('Locale') ?>
                            <span class="required">*</span>
                            </label>
                        </td>
                        <td class="value">
                            <select id="locale_select" name="locale" class="select required-entry">
                                <?php foreach ($this->getLocaleOptions() as $_option): ?>
                                <option value="<?= $_option['value'] ?>"<?php if ($_option['value']==$this->getCurrentLocale()): ?> selected="selected"<?php endif ?>><?= $_option['label'] ?></option>
                                <?php endforeach ?>
                            </select>
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td class="label">
                            <label>&nbsp;</label>
                        </td>
                        <td class="value">
                            <?= $this->getLoadButtonHtml() ?>
                        </td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</form>
<?php endif ?>
<form action="<?= $this->getSaveUrl() ?>" method="post" id="email_template_edit_form">
    <?= $this->getBlockHtml('formkey') ?>
    <fieldset>
        <input type="hidden" id="change_flag_element" name="_change_type_flag" value="" />
        <input type="hidden" id="orig_template_code" name="orig_template_code" value="<?= $this->getOrigTemplateCode() ?>" />
        <?= $this->getFormHtml() ?>
    </fieldset>
</form>
<form action="<?= $this->getPreviewUrl() ?>" method="post" id="email_template_preview_form" target="_blank">
    <?= $this->getBlockHtml('formkey') ?>
    <div class="no-display">
        <input type="hidden" id="preview_type" name="type" value="<?= $this->isTextType()?1:2 ?>" />
        <input type="hidden" id="preview_text" name="text" value="" />
        <input type="hidden" id="preview_styles" name="styles" value="" />
    </div>
</form>
<script>
const templateForm = new varienForm('email_template_edit_form');
const templatePreviewForm = new varienForm('email_template_preview_form');

const templateControl = {
    unconvertedText: '',
    typeChange: false,
    variables: null,

    init() {
        const convertButtonBack = document.getElementById('convert_button_back');
        if (convertButtonBack) {
            convertButtonBack.style.display = 'none';
        }
        this.renderPaths(<?= $this->getUsedDefaultForPaths() ?>, 'used_default_for');
        this.renderPaths(<?= $this->getUsedCurrentlyForPaths() ?>, 'used_currently_for');
    },

    stripTags() {
        if (!window.confirm("<?= $this->jsQuoteEscape($this->__('Are you sure that you want to strip tags?')) ?>")) {
            return false;
        }

        const templateText = document.getElementById('template_text');
        this.unconvertedText = templateText.value;

        document.getElementById('convert_button').style.display = 'none';

        // Strip scripts, styles and HTML tags
        let cleanedValue = templateText.value
            .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
            .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');

        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = cleanedValue;
        templateText.value = (tempDiv.textContent || tempDiv.innerText || '').trim();

        document.getElementById('convert_button_back').style.display = '';

        const fieldStyles = document.getElementById('field_template_styles');
        if (fieldStyles) {
            fieldStyles.style.display = 'none';
        }

        this.typeChange = true;
        return false;
    },

    unStripTags() {
        document.getElementById('convert_button').style.display = '';
        document.getElementById('convert_button_back').style.display = 'none';
        document.getElementById('template_text').value = this.unconvertedText;

        const fieldStyles = document.getElementById('field_template_styles');
        if (fieldStyles) {
            fieldStyles.style.display = '';
        }

        this.typeChange = false;
        return false;
    },

    save() {
        if (this.typeChange) {
            document.getElementById('change_flag_element').value = '1';
        }

        // Check if we have a QuillJS editor
        const editor = window.quillEditors?.get('template_text');
        if (editor?.editor) {
            editor.updateTextArea();
        }

        templateForm.submit();
        return false;
    },

    preview() {
        const previewType = document.getElementById('preview_type');
        if (this.typeChange) {
            previewType.value = 1;
        } else {
            previewType.value = 2;
        }

        const previewText = document.getElementById('preview_text');
        const templateText = document.getElementById('template_text');

        // Check if we have a QuillJS editor
        const editor = window.quillEditors?.get('template_text');
        if (editor?.editor) {
            editor.updateTextArea();
        }

        previewText.value = templateText.value;

        const templateStyles = document.getElementById('template_styles');
        if (templateStyles) {
            document.getElementById('preview_styles').value = templateStyles.value;
        }

        templatePreviewForm.submit();
        return false;
    },

    deleteTemplate() {
        if (window.confirm("<?= $this->jsQuoteEscape($this->__('Are you sure that you want to delete this template?')) ?>")) {
            window.location.href = '<?= $this->getDeleteUrl() ?>';
        }
    },

    load() {
        const form = new varienForm('email_template_load_form');

        if (!form.validator.validate()) {
            return;
        }

        this.variables = null;

        const formElement = document.getElementById('email_template_load_form');
        const formData = new FormData(formElement);

        mahoFetch(formElement.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            try {
                const fields = typeof response === 'string' ? JSON.parse(response) : response;
                Object.entries(fields).forEach(([key, value]) => {
                    const element = document.getElementById(key);
                    if (element) {
                        element.value = typeof value === 'string' ? value.trim() : value;
                    }

                    if (key === 'template_type') {
                        const convertButton = document.getElementById('convert_button');
                        const convertButtonBack = document.getElementById('convert_button_back');

                        if (value == 1) {
                            this.typeChange = true;
                            convertButton.style.display = 'none';
                            convertButtonBack.style.display = 'none';
                        } else {
                            this.typeChange = false;
                            convertButtonBack.style.display = 'none';
                            convertButton.style.display = '';
                        }
                    }

                    if (key === 'orig_template_used_default_for') {
                        const usedDefaultFor = document.getElementById('used_default_for');
                        if (value.length) {
                            usedDefaultFor.style.display = '';
                            this.renderPaths(value, 'used_default_for');
                        } else {
                            usedDefaultFor.style.display = 'none';
                        }
                    }
                });
            } catch (e) {
                console.error('Failed to parse response:', e);
            }
        })
        .catch(error => {
            console.error('Request failed:', error);
        });
    },

    renderPaths(paths, fieldId) {
        const field = document.getElementById(fieldId);
        if (field) {
            const tdElement = field.querySelector('td');
            if (tdElement && tdElement.nextElementSibling) {
                tdElement.nextElementSibling.innerHTML = this.parsePath(paths, '<span class="path-delimiter">&nbsp;-&gt;&nbsp;</span>', '<br />');
            }
        }
    },

    parsePath(value, pathDelimiter, lineDelimiter) {
        if (Array.isArray(value)) {
            const result = [];
            for (let i = 0, len = value.length; i < len; i++) {
                result.push(this.parsePath(value[i], pathDelimiter, pathDelimiter));
            }
            return result.join(lineDelimiter);
        }

        if (typeof value !== 'string' && value.title) {
            value = (value.url ? '<a href="' + value.url + '">' + value.title + '</a>' : value.title) +
                    (value.scope ? '&nbsp;&nbsp;<span class="path-scope-label">(' + value.scope + ')</span>' : '');
        }

        return value;
    },

    openVariableChooser() {
        Variables.init('template_text');
        if (this.variables == null) {
            Variables.resetData();
            const variablesElement = document.getElementById('variables');
            if (variablesElement?.value) {
                try {
                    this.variables = JSON.parse(variablesElement.value);
                } catch (e) {
                    console.error('Failed to parse variables:', e);
                }
            }

            const templateVariablesElement = document.getElementById('template_variables');
            if (this.variables && templateVariablesElement?.value) {
                try {
                    const templateVariables = JSON.parse(templateVariablesElement.value);
                    if (templateVariables) {
                        this.variables.push(templateVariables);
                    }
                } catch (e) {
                    console.error('Failed to parse template variables:', e);
                }
            }
        }
        if (this.variables) {
            Variables.openVariableChooser(this.variables);
        }
    }
};

templateControl.init();
</script>
