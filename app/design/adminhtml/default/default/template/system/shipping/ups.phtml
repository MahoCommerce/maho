<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2022-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Core_Helper_Data $_coreHelper */
$_coreHelper = Mage::helper('core');
/** @var Mage_Usa_Model_Shipping_Carrier_Ups $upsModel */
$upsModel = Mage::getSingleton('usa/shipping_carrier_ups');
$orShipArr = $upsModel->getCode('originShipment');
$defShipArr = $upsModel->getCode('method');
$allMethodsCodes = [];
foreach (Mage::getModel('usa/shipping_carrier_ups_source_method')->toOptionArray() as $method) {
    $allMethodsCodes[]= $method['value'];
}
/** @var Mage_Adminhtml_Block_Template $this */
$sectionCode = $this->getRequest()->getParam('section');
$websiteCode = $this->getRequest()->getParam('website');
$storeCode = $this->getRequest()->getParam('store');

if (!$storeCode && $websiteCode) {
    /** @var Mage_Core_Model_Website $web */
    $web = Mage::getModel('Mage_Core_Model_Website')->load($websiteCode);
    $storedAllowedMethods = explode(',', $web->getConfig('carriers/ups/allowed_methods'));
    $storedOriginShipment = $web->getConfig('carriers/ups/origin_shipment');
    $storedFreeShipment   = $web->getConfig('carriers/ups/free_method');
    $storedUpsType        = $web->getConfig('carriers/ups/type');
} elseif ($storeCode) {
    $storedAllowedMethods = explode(',', Mage::getStoreConfig('carriers/ups/allowed_methods', $storeCode));
    $storedOriginShipment = Mage::getStoreConfig('carriers/ups/origin_shipment', $storeCode);
    $storedFreeShipment   = Mage::getStoreConfig('carriers/ups/free_method', $storeCode);
    $storedUpsType        = Mage::getStoreConfig('carriers/ups/type', $storeCode);
} else {
    $storedAllowedMethods = explode(',', Mage::getStoreConfig('carriers/ups/allowed_methods'));
    $storedOriginShipment = Mage::getStoreConfig('carriers/ups/origin_shipment');
    $storedFreeShipment   = Mage::getStoreConfig('carriers/ups/free_method');
    $storedUpsType        = Mage::getStoreConfig('carriers/ups/type');
}
if (!in_array($storedOriginShipment, array_keys($orShipArr))) {
    $storedOriginShipment = '';
}
if ($storedFreeShipment != '' && !in_array($storedFreeShipment, $allMethodsCodes)) {
    $storedFreeShipment = '';
}
if (!Mage::helper('usa')->validateUpsType($storedUpsType)) {
    $storedUpsType = '';
}
?>
<script type="module">
    class UPS {
        constructor() {
            this.carriersUpsTypeId = 'carriers_ups_type';
            if (!document.getElementById(this.carriersUpsTypeId)) {
                return;
            }

            this.originShipmentTitle = '';
            this.allowedMethodsId = 'carriers_ups_allowed_methods';
            this.freeShipmentId = 'carriers_ups_free_method';

            this.storedOriginShipment = '<?= $storedOriginShipment ?>';
            this.storedFreeShipment = '<?= $storedFreeShipment ?>';
            this.storedUpsType = '<?= $storedUpsType ?>';
            this.storedAllowedMethods = <?= $_coreHelper->jsonEncode($storedAllowedMethods) ?>;
            this.originShipmentObj = <?= $_coreHelper->jsonEncode($orShipArr) ?>;
            this.originShipmentObj['default'] = <?= $_coreHelper->jsonEncode($defShipArr) ?>;

            // Set up event listeners
            document.getElementById(this.carriersUpsTypeId).addEventListener('change', () => this.changeOriginShipment());
            document.getElementById('carriers_ups_active').addEventListener('change', () => this.changeOriginShipment());

            const originShipmentEl = document.getElementById('carriers_ups_origin_shipment');
            originShipmentEl.addEventListener('change', () => this.changeOriginShipment());

            // Initialize with current values
            this.changeOriginShipment();
        }

        updateAllowedMethods(originShipmentTitle) {
            const allowedMethods = document.getElementById(this.allowedMethodsId); // multiselect
            const freeMethod = document.getElementById(this.freeShipmentId); // single-choice select
            const originShipment = this.originShipmentObj[originShipmentTitle];

            // Clear existing options
            allowedMethods.innerHTML = '';
            freeMethod.innerHTML = '';

            // Add "None" option to free method select
            const noneOption = document.createElement('option');
            noneOption.value = '';
            noneOption.textContent = 'None';
            freeMethod.appendChild(noneOption);

            // Add options for each shipping method
            for (const code in originShipment) {
                // Create and add option for free method select
                const freeOption = document.createElement('option');
                freeOption.value = code;
                freeOption.textContent = originShipment[code];

                if ((originShipmentTitle == this.storedOriginShipment || originShipmentTitle == 'default')
                    && this.storedFreeShipment == code) {
                    freeOption.selected = true;
                }
                freeMethod.appendChild(freeOption);

                // Create and add option for allowed methods multiselect
                const allowedOption = document.createElement('option');
                allowedOption.value = code;
                allowedOption.textContent = originShipment[code];

                if (this.storedUpsType == 'UPS') {
                    if (originShipmentTitle != 'default' || this.storedAllowedMethods.includes(code)) {
                        allowedOption.selected = true;
                    }
                } else if (originShipmentTitle != this.storedOriginShipment
                    || this.storedAllowedMethods.includes(code)) {
                    allowedOption.selected = true;
                }

                if ((originShipmentTitle == 'default' || originShipmentTitle == this.storedOriginShipment)
                    && this.storedAllowedMethods.includes(code)) {
                    allowedOption.selected = true;
                }

                allowedMethods.appendChild(allowedOption);
            }
        }

        changeOriginShipment() {
            this.originShipmentTitle = document.getElementById('carriers_ups_origin_shipment').value;
            this.updateAllowedMethods(this.originShipmentTitle);
        }
    }

    new UPS();
</script>
