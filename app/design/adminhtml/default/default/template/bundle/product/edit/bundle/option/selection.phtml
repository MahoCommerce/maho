<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2025 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Bundle_Block_Adminhtml_Catalog_Product_Edit_Tab_Bundle_Option_Selection $this */
?>
<script type="text/javascript">
const bundleTemplateBox = '<table class="border" cellpadding="0" cellspacing="0">' +
    '    <thead>' +
    '        <tr class="headings">' +
    '            <th><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Name')) ?></th>' +
    <?php if ($this->getCanReadPrice() !== false) : ?>
    '            <th class="type-price price-type-box"><?= $this->jsQuoteEscape(Mage::helper('catalog')->__('Price')) ?></th>' +
    '            <th class="type-type price-type-box"><?= $this->jsQuoteEscape(Mage::helper('bundle')->__('Price Type')) ?></th>' +
    <?php endif ?>
    '            <th class="type-price"><?= $this->jsQuoteEscape(Mage::helper('bundle')->__('Default Qty')) ?></th>' +
    '            <th class="type-uqty qty-box"><?= $this->jsQuoteEscape(Mage::helper('bundle')->__('User Defined Qty')) ?></th>' +
    '            <th class="type-order"><?= $this->jsQuoteEscape(Mage::helper('bundle')->__('Position')) ?></th>' +
    '            <th style="width:1px"><?= $this->jsQuoteEscape(Mage::helper('bundle')->__('Default')) ?></th>' +
    '            <th class="last">&nbsp;</th>' +
    '        </tr>' +
    '    </thead> ' +
    '    <tbody>' +
    '    </tbody>' +
    '</table>';

const bundleTemplateRow ='<td>' +
                '    <input type="hidden" id="<?= $this->getFieldId() ?>_id_{{index}}" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][selection_id]" value="{{selection_id}}">' +
                '    <input type="hidden" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][option_id]" value="{{option_id}}">' +
                '    <input type="hidden" class="product" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][product_id]" value="{{product_id}}">' +
                '    <input type="hidden" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][delete]" value="{{delete}}" class="delete">' +
                '    {{name}}<br />' +
                '   <div  class="nobr">' +
                '        <strong><?= $this->helper('sales')->__('SKU') ?>:</strong> <a href="<?= $this->getUrl('*/catalog_product/edit', ['store' => $this->getRequest()->getParam('store')]) ?>id/{{product_id}}/">{{sku}}</a>' +
                '    </div>' +
                '</td>' +
                <?php if ($this->getCanReadPrice() !== false) : ?>
                '<td class="price-type-box"><input id="<?= $this->getFieldId() ?>_{{index}}_price_value" class="input-text required-entry validate-zero-or-greater" type="text" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][selection_price_value]" value="{{selection_price_value}}"<?php if($this->getCanEditPrice() === false) : ?> disabled="disabled"<?php endif ?>></td>' +
                '<td class="price-type-box"><?= $this->getPriceTypeSelectHtml() ?><div><?= $this->getCheckboxScopeHtml() ?></div></td>' +
                <?php else: ?>
                    '<input type="hidden" id="<?= $this->getFieldId() ?>_{{index}}_price_value" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][selection_price_value]" value="0" />' +
                    '<input type="hidden" id="<?= $this->getFieldId() ?>_{{index}}_price_type" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][selection_price_type]" value="0" />' +
                    <?php if ($this->isUsedWebsitePrice()): ?>
                    '<input type="hidden" id="<?= $this->getFieldId() ?>_{{index}}_price_scope" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][default_price_scope]" value="1" />' +
                    <?php endif ?>
                <?php endif ?>
                '<td><input class="input-text required-entry validate-greater-zero-based-on-option validate-zero-or-greater" type="text" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][selection_qty]" value="{{selection_qty}}"></td>' +
                '<td class="qty-box"><?= $this->getQtyTypeSelectHtml() ?></td>' +
                '<td><input class="input-text required-entry validate-zero-or-greater" type="text" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][position]" value="{{position}}"></td>' +
                '<td class="a-center"><input onclick="window.bSelection.checkGroup(event)" type="{{option_type}}" class="default" name="<?= $this->getFieldName() ?>[{{parentIndex}}][{{index}}][is_default]" value="1" {{checked}}></td>' +
                '<td class="last"><span title="Delete Row"><?= $this->getSelectionDeleteButtonHtml() ?></span></td>';

class BundleSelection {
    constructor() {
        this.idLabel = '<?= $this->getFieldId() ?>';
        this.scopePrice = <?= (int)$this->isUsedWebsitePrice() ?>;
        this.templateSyntax = /(^|.|\r|\n)({{(\w+)}})/;
        this.templateBox = '';
        this.templateRow = '';
        this.itemsCount = 0;
        this.row = null;
        this.gridSelection = new Map();

        this.initialize();
    }

    initialize() {
        this.templateBox = '<div class="grid tier form-list" id="' + this.idLabel + '_box_{{parentIndex}}">' + bundleTemplateBox + '</div>';
        this.templateRow = '<tr class="selection" id="' + this.idLabel + '_row_{{index}}">' + bundleTemplateRow + '</tr>';
    }

    showSearch(event) {
        const element = event.target.closest('div');
        const parts = element.id.split('_');

        const products = [];
        const inputs = document.querySelectorAll('#' + element.id + ' tr.selection input.product');
        for (let i = 0; i < inputs.length; i++) {
            products.push(inputs[i].value);
        }

        this.gridSelection.set(parts[2], new Map());

        const formData = new FormData();
        formData.append('index', parts[2]);
        products.forEach(product => formData.append('products[]', product));
        formData.append('form_key', FORM_KEY);

        mahoFetch('<?= $this->getSelectionSearchUrl() ?>', {
            method: 'POST',
            body: formData
        })
        .then(html => {
            document.getElementById(bOption.idLabel + '_search_' + parts[2]).innerHTML = html;
            const scripts = document.getElementById(bOption.idLabel + '_search_' + parts[2]).querySelectorAll('script');
            scripts.forEach(script => {
                const newScript = document.createElement('script');
                newScript.textContent = script.textContent;
                document.head.appendChild(newScript);
            });
        });

        let button;
        if (event.target.tagName.toLowerCase() !== 'button') {
            button = event.target.closest('button');
        } else {
            button = event.target;
        }
        button.style.display = 'none';
    }

    addRow(parentIndex, data) {
        let box = document.getElementById(this.idLabel + '_box_' + parentIndex);
        if (!box) {
            this.addBox(parentIndex);
            box = document.getElementById(this.idLabel + '_box_' + parentIndex);
        } else {
            box.style.display = 'block';
        }

        const optionType = document.getElementById(bOption.idLabel + '_' + parentIndex + '_type');

        if (!data) {
            data = {};
        }

        // Ensure required fields have default values - explicit initialization
        data.product_id = data.product_id || '';
        data.selection_id = data.selection_id || '';
        data.option_id = data.option_id || '';
        data.name = data.name || '';
        data.sku = data.sku || '';
        data.position = data.position || 0;
        data.is_default = data.is_default || 0;

        // Always set delete field - critical for form submission
        data.delete = '0';

        if (data.selection_qty) {
            data.selection_qty = parseFloat(data.selection_qty);
        }

        if (data.can_read_price !== undefined && !data.can_read_price) {
            data.selection_price_value = '';
        } else {
            data.selection_price_value = Number(data.selection_price_value).toFixed(2);
        }

        data.index = this.itemsCount++;
        data.parentIndex = parentIndex;

        if (optionType && optionType.value && (optionType.value === 'multi' || optionType.value === 'checkbox')) {
            data.option_type = 'checkbox';
        } else {
            data.option_type = 'radio';
        }

        if (data.is_default == 1) {
            data.checked = 'checked="checked"';
        }

        const html = this.templateRow.replace(/{{(\w+)}}/g, (match, key) => {
            return data.hasOwnProperty(key) ? data[key] : '';
        });
        const tbody = document.querySelector('#' + this.idLabel + '_box_' + parentIndex + ' tbody');
        tbody.insertAdjacentHTML('beforeend', html);

        if (typeof data.selection_price_type !== 'undefined') {
            const priceTypeSelect = document.getElementById(this.idLabel + '_' + data.index + '_price_type');
            if (priceTypeSelect) {
                Array.from(priceTypeSelect.options).forEach(option => {
                    if (option.value === data.selection_price_type) option.selected = true;
                });
            }
        }

        if (typeof data.selection_can_change_qty !== 'undefined') {
            const qtySelect = document.getElementById(this.idLabel + '_' + data.index + '_can_change_qty');
            if (qtySelect) {
                Array.from(qtySelect.options).forEach(option => {
                    if (option.value === data.selection_can_change_qty) option.selected = true;
                });
            }
        }

        const checkbox = document.getElementById(this.idLabel + '_' + data.index + '_price_scope');
        if (checkbox && this.scopePrice) {
            if (data.price_scope === undefined) {
                checkbox.closest('div').style.display = 'none';
            } else if (!data.price_scope) {
                checkbox.checked = true;
                this.addScope(null, checkbox);
            }
        }

        this.bindScopeCheckbox();

        if (optionType && optionType.value && (optionType.value === 'multi' || optionType.value === 'checkbox')) {
            const qtyBoxes = document.querySelectorAll('#' + this.idLabel + '_box_' + data.parentIndex + ' .qty-box');
            qtyBoxes.forEach(elem => elem.style.display = 'none');
        }

        const priceTypeElement = document.getElementById('price_type');
        if (!priceTypeElement || priceTypeElement.value !== '1') {
            const priceTypeBoxes = document.querySelectorAll('#' + this.idLabel + '_box_' + data.parentIndex + ' .price-type-box');
            priceTypeBoxes.forEach(elem => elem.style.display = 'none');
        }

        const inputs = document.querySelectorAll('#bundle_option_' + data.parentIndex + ' input');
        inputs.forEach(el => {
            el.addEventListener('change', () => el.setHasChanges?.(el));
        });

        const deleteButtons = document.querySelectorAll('#bundle_option_' + data.parentIndex + ' button.delete');
        deleteButtons.forEach(el => {
            el.addEventListener('click', () => el.setHasChanges?.(el));
        });
    }

    bindScopeCheckbox() {
        const checkboxes = document.querySelectorAll('.bundle-option-price-scope-checkbox');
        checkboxes.forEach(checkbox => {
            if (!checkbox.binded) {
                checkbox.binded = true;
                checkbox.addEventListener('click', (event) => this.addScope(event));
            }
        });
    }

    addScope(event, element) {
        if (element === undefined) {
            element = event.target;
        }
        const priceValue = document.getElementById(element.id.replace('scope', 'value'));
        const priceType = document.getElementById(element.id.replace('scope', 'type'));

        if (element.checked) {
            priceValue.disabled = true;
            priceType.disabled = true;
        } else {
            priceValue.disabled = false;
            priceType.disabled = false;
        }
    }

    addBox(parentIndex) {
        const div = document.getElementById(bOption.idLabel + '_' + parentIndex);
        const html = this.templateBox.replace(/{{parentIndex}}/g, parentIndex);
        div.insertAdjacentHTML('beforeend', html);
    }

    remove(event) {
        const element = event.target.closest('tr');
        const container = event.target.closest('div');

        if (element) {
            element.querySelectorAll('.delete').forEach(elem => elem.value = '1');
            element.querySelectorAll('input, select').forEach(elem => elem.style.display = 'none');
            element.classList.remove('selection');
            element.style.display = 'none';

            if (container) {
                const selections = container.querySelectorAll('tr.selection');
                if (selections.length === 0) {
                    container.style.display = 'none';
                }
            }
        }
    }

    checkGroup(event) {
        const element = event.target;
        if (element.type === 'radio') {
            const box = element.closest('div');
            const inputs = document.querySelectorAll('div#' + box.id + ' input.default');

            inputs.forEach(input => {
                if (input.name !== element.name) {
                    input.checked = false;
                }
            });
        }
    }

    productGridAddSelected(event) {
        const element = event.target.closest('button');
        const parts = element.id.split('_');

        document.getElementById(bOption.idLabel + '_search_' + parts[2]).innerHTML = '';
        document.getElementById(bOption.idLabel + '_' + parts[2] + '_add_button').style.display = 'block';

        const selections = this.gridSelection.get(parts[2]);
        if (selections) {
            selections.forEach((value, key) => {
                const qty = value.get('qty');
                const data = {
                    'name': value.get('name'),
                    'selection_price_value': 0,
                    'selection_qty': (qty === '' ? 1 : qty),
                    'sku': value.get('sku'),
                    'position': 0,
                    'product_id': key,
                    'option_id': document.getElementById(bOption.idLabel + '_id_' + parts[2]).value
                };
                window.bSelection.addRow(parts[2], data);
            });
        }
    }

    productGridRowInit(grid, row) {
        const checkbox = row.querySelector('.checkbox');
        const inputs = row.querySelectorAll('.input-text');
        inputs.forEach(input => {
            input.checkbox = checkbox;
            input.addEventListener('keyup', this.productGridRowInputChange.bind(this));
            input.addEventListener('change', this.productGridRowInputChange.bind(this));
        });
    }

    productGridCheckboxCheck(grid, element, checked) {
        const id = element.closest('table').id.split('_')[4];
        if (element.value > 0) {
            if (element.checked) {
                const tr = element.closest('tr');
                if (!this.gridSelection.has(id)) {
                    this.gridSelection.set(id, new Map());
                }
                const selection = new Map();
                selection.set('name', tr.querySelector('td.name').innerHTML);
                selection.set('qty', tr.querySelector('input.qty').value);
                selection.set('sku', tr.querySelector('td.sku').innerHTML);
                this.gridSelection.get(id).set(element.value, selection);
            } else {
                this.gridSelection.get(id).delete(element.value);
            }
        }
    }

    productGridRowClick(grid, event) {
        const trElement = event.target.closest('tr');
        const isInput = event.target.tagName === 'INPUT';
        if (trElement) {
            const checkbox = trElement.querySelector('input[type="checkbox"]');
            if (checkbox) {
                const checked = isInput ? checkbox.checked : !checkbox.checked;
                grid.setCheckboxChecked(checkbox, checked);
            }
        }
    }

    productGridRowInputChange(event) {
        const element = event.target;
        if (!element.checkbox.checked) {
            return;
        }
        const id = element.closest('table').id.split('_')[4];
        this.gridSelection.get(id).get(element.checkbox.value).set('qty', element.value);
    }
}

window.bSelection = new BundleSelection();
</script>
