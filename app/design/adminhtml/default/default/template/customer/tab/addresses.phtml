<?php
/**
 * Maho
 *
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2017-2024 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024-2025 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var Mage_Adminhtml_Block_Customer_Edit_Tab_Addresses $this */
?>
<!-- Addresses list -->
<table cellspacing="0" class="form-edit">
<tr>
<td class="address-list">
    <div class="entry-edit-head">
        <h4><?= Mage::helper('customer')->__('Customer Addresses') ?></h4>
    </div>
    <div class="sub-btn-set"><?= $this->getAddNewButtonHtml() ?></div>
    <ul id="address_list">
    <?php $_iterator = 0; ?>
    <?php if (count($addressCollection)): ?>
        <?php foreach ($addressCollection as $_address): ?>
        <li id="address_item_<?= $_address->getId() ?>">
            <?php if (!$this->isReadonly()): ?>
            <a href="#" class="btn-remove-address" id="delete_button<?= ++$_iterator ?>" title="<?= $this->quoteEscape(Mage::helper('customer')->__('Remove address')) ?>" aria-label="<?= $this->quoteEscape(Mage::helper('customer')->__('Remove address')) ?>">
                <?= $this->getIconSvg('circle-x') ?>
            </a>
            <?php endif ?>
            <address>
                <?= $this->maliciousCodeFilter($_address->format('html')) ?>
            </address>
            <div class="address-type">
                <span class="address-type-line">
                    <input type="radio" <?php if ($this->isReadonly()):?> disabled="disabled"<?php endif ?> value="<?= $_address->getId() ?>" id="address_item_billing<?= $_address->getId() ?>" name="account[default_billing]" title="<?= $this->quoteEscape(Mage::helper('customer')->__('Set as Default Billing Address')) ?>"<?php if ($_address->getId() == $customer->getDefaultBilling()): ?> checked="checked"<?php endif ?>/>
                    &nbsp;<label for="address_item_billing<?= $_address->getId() ?>"><?= Mage::helper('customer')->__('Default Billing Address') ?></label>
                </span>
                <span class="address-type-line">
                    <input type="radio"  <?php if ($this->isReadonly()):?> disabled="disabled"<?php endif ?> value="<?= $_address->getId() ?>" id="address_item_shipping<?= $_address->getId() ?>" name="account[default_shipping]" title="<?= $this->quoteEscape(Mage::helper('customer')->__('Set as Default Shipping Address')) ?>"<?php if ($_address->getId() == $customer->getDefaultShipping()): ?> checked="checked"<?php endif ?>/>
                    &nbsp;<label for="address_item_shipping<?= $_address->getId() ?>"><?= Mage::helper('customer')->__('Default Shipping Address') ?></label>
                </span>
            </div>
        </li>
        <?php endforeach ?>
    <?php endif ?>
    </ul>
</td>
<td>
    <!-- Template for adding address item to list -->
    <?php $_templatePrefix = $this->getTemplatePrefix() ?>
    <div id="address_item_template" class="no-display template">
        <?php if (!$this->isReadonly()): ?>
        <a href="#" class="btn-remove-address" id="delete_button<?= ++$_iterator ?>" title="<?= $this->quoteEscape(Mage::helper('customer')->__('Remove address')) ?>" aria-label="<?= $this->quoteEscape(Mage::helper('customer')->__('Remove address')) ?>">
            <?= $this->getIconSvg('circle-x') ?>
        </a>
        <?php endif ?>
        <address><?= Mage::helper('customer')->__('New Customer Address') ?></address>
        <div class="address-type">
            <span class="address-type-line">
                <input  <?php if ($this->isReadonly()):?> disabled="disabled"<?php endif ?> type="radio" value="<?= $_templatePrefix ?>" id="address_item_billing<?= $_templatePrefix ?>" name="account[default_billing]" title="<?= $this->quoteEscape(Mage::helper('customer')->__('Set as Default Billing Address')) ?>"/>
                &nbsp;<label for="address_item_billing<?= $_templatePrefix ?>"><?= Mage::helper('customer')->__('Default Billing Address') ?></label>
            </span>
            <span class="address-type-line">
                <input  <?php if ($this->isReadonly()):?> disabled="disabled"<?php endif ?> type="radio" value="<?= $_templatePrefix ?>" id="address_item_shipping<?= $_templatePrefix ?>" name="account[default_shipping]" title="<?= $this->quoteEscape(Mage::helper('customer')->__('Set as Default Shipping Address')) ?>"/>
                &nbsp;<label for="address_item_shipping<?= $_templatePrefix ?>"><?= Mage::helper('customer')->__('Default Shipping Address') ?></label>
            </span>
        </div>
    </div>

    <!-- Address form template -->
    <div id="address_form_template" class="no-display template">
    <?php $this->getForm()->setHtmlIdPrefix($_templatePrefix)->setFieldNameSuffix('address[' . $_templatePrefix . ']') ?>
    <?= $this->getForm()->getHtml() ?>
    <?= $this->getCancelButtonHtml() ?>
    </div>
<!-- -->

<!-- Addresses forms -->
    <div class="entry-edit" id="address_form_container">
        <?php if (count($addressCollection)): ?>
            <?php foreach ($addressCollection as $_address): ?>
            <div id="form_address_item_<?= $_address->getId() ?>" style="display:none">
            <?php
                $this->getForm()->setValues($_address->getData())
                        ->setHtmlIdPrefix("_item{$_address->getId()}")
                        ->setFieldNameSuffix('address[' . $_address->getId() . ']');
                $this->addValuesToNamePrefixElement($_address->getPrefix())
                    ->addValuesToNameSuffixElement($_address->getSuffix());
                ?>
            <?= $this->getForm()->getHtml() ?>
            <input type="hidden" name="address[<?= $_address->getId() ?>][_deleted]" id="deleted_address_item_<?= $_address->getId() ?>" />
            </div>
            <?php endforeach ?>
        <?php else: ?>
            <div id="no_address_message"><?= Mage::helper('customer')->__('This customer has no saved addresses.') ?></div>
        <?php endif ?>
    </div>

<script type="text/javascript">
let deleteButtonId = <?= $_iterator ?>;

class addressesModel {
    constructor() {
        this.activeItem = null;
        this.itemTemplate = document.getElementById('address_item_template');
        this.formTemplate = document.getElementById('address_form_template');
        this.itemContainer = document.getElementById('address_list');
        this.formContainer = document.getElementById('address_form_container');
        this.baseItemId = 'new_item';

        this.defaultCountries = <?= $this->getDefaultCountriesJson() ?>;
        this.itemContentTemplate = '<?= $this->helper('customer/address')->getFormat('js_template') ?>';

        this.regionsUrl = '<?= $this->getRegionsUrl() ?>';
        this.requiredStateForCountries = <?= $this->helper('directory')->getCountriesWithStatesRequired(true) ?>;
        this.showAllRegions = <?= (string) $this->helper('directory')->getShowNonRequiredState() ? 1 : 0 ?>;

        this.reloadItemList(true);

        for (let i = 0, n = this.itemList.length; i < n; i++) {
            if (this.itemList[i].id) {
                this.addItemObservers(this.itemList[i]);
                this.initItem(this.itemList[i]);
            }
        }

        const addButton = document.getElementById('add_new_address_button');
        if (addButton) {
            addButton.addEventListener('click', this.addNewAddress.bind(this));
        }

        this.setActiveItem(this.itemList[0]);
        this.setAddressAsDefault();
        this.bindCountryRegionRelation();
    }

    reloadItemList(initial) {
        this.itemList = Array.from(document.querySelectorAll('#address_list li'));
        if (initial) {
            this.itemCount = this.itemList.length;
        }
        if (!this.itemList.length) {
            const noAddressMessage = document.getElementById('no_address_message');
            if (noAddressMessage) {
                noAddressMessage.style.display = 'block';
            } else {
                this.formContainer.innerHTML += '<div id="no_address_message"><?= $this->jsQuoteEscape(Mage::helper('customer')->__('This customer has no saved addresses.')) ?></div>';
            }
        }
    }

    initItem(item) {
        const formId = 'form_' + item.id;
        const formElement = document.getElementById(formId);
        if (item && formElement) {
            item.formBlock = formElement;
            formElement.style.display = 'none';
            formElement.statusBar = item;
            formElement.addressItem = item;

            // set Zip optional/required
            const countryElementId = '_item' + item.id.replace(/address_item_/, '').replace(new RegExp(this.baseItemId), '') + 'country_id';
            const countryElement = document.getElementById(countryElementId);
            if (countryElement && window.varienGlobalEvents) {
                varienGlobalEvents.fireEvent("address_country_changed", countryElement);
            }
        }
    }

    addItemObservers(item) {
        if (item.id) {
            item.addEventListener('mouseover', this.itemMouseOver.bind(this));
            item.addEventListener('mouseout', this.itemMouseOut.bind(this));
            item.addEventListener('click', this.itemMouseClick.bind(this));
        }
    }

    addNewAddress(event) {
        if (this.canCreateNewAddress()) {
            this.itemCount++;
            const noAddressMessage = document.getElementById('no_address_message');
            if (noAddressMessage) {
                noAddressMessage.style.display = 'none';
            }

            // preventing duplication of ids for fields and blocks
            while (document.getElementById('form_address_item_' + this.itemCount)) {
                this.itemCount++;
            }

            // create new form elements
            const formId = 'form_' + this.baseItemId + this.itemCount;
            const formDiv = document.createElement('div');
            formDiv.id = formId;
            formDiv.innerHTML = this.prepareTemplate(this.formTemplate.innerHTML);
            this.formContainer.appendChild(formDiv);

            const newForm = document.getElementById(formId);

            // Set default values
            const firstnameEl = document.getElementById('_item' + this.itemCount + 'firstname');
            const lastnameEl = document.getElementById('_item' + this.itemCount + 'lastname');
            const accountFirstname = document.getElementById('_accountfirstname');
            const accountLastname = document.getElementById('_accountlastname');

            if (firstnameEl && accountFirstname) firstnameEl.value = accountFirstname.value;
            if (lastnameEl && accountLastname) lastnameEl.value = accountLastname.value;

            const accountWebsiteId = document.getElementById('_accountwebsite_id');
            const countryEl = document.getElementById('_item' + this.itemCount + 'country_id');
            if (accountWebsiteId && countryEl && accountWebsiteId.value !== '' &&
                this.defaultCountries[accountWebsiteId.value] !== undefined) {
                countryEl.value = this.defaultCountries[accountWebsiteId.value];
            }

            newForm.style.display = 'none';

            // Create new item template
            const itemId = this.baseItemId + this.itemCount;
            const itemLi = document.createElement('li');
            itemLi.id = itemId;
            deleteButtonId++;
            itemLi.innerHTML = this.prepareTemplate(this.itemTemplate.innerHTML)
                .replace('delete_button', 'delete_button' + deleteButtonId);
            this.itemContainer.appendChild(itemLi);

            const newItem = document.getElementById(itemId);
            newItem.isNewAddress = true;
            newItem.formBlock = newForm;

            newForm.statusBar = newItem;
            newForm.addressItem = newItem;

            // set Zip optional/required
            const countryElementId = '_item' + newItem.id.replace(/address_item_/, '').replace(new RegExp(this.baseItemId), '') + 'country_id';
            const countryElement = document.getElementById(countryElementId);
            if (countryElement && window.varienGlobalEvents) {
                varienGlobalEvents.fireEvent("address_country_changed", countryElement);
            }

            this.addItemObservers(newItem);
            this.setActiveItem(newItem);
            this.bindCountryRegionRelation(newForm.id);

            if (firstnameEl && firstnameEl.value) this.syncFormData({ target: firstnameEl });
            if (lastnameEl && lastnameEl.value) this.syncFormData({ target: lastnameEl });
        }
        this.reloadItemList();
    }

    prepareTemplate(template) {
        return template
            .replace(/<?= $_templatePrefix ?>/g, '_item' + this.itemCount)
            .replace(/_counted="undefined"/g, '');
    }

    canCreateNewAddress() {
        return true;
    }

    itemMouseOver(event) {
        const element = event.target.closest('li');
        if (element) element.classList.add('over');
    }

    itemMouseOut(event) {
        const element = event.target.closest('li');
        if (element) element.classList.remove('over');
    }

    itemMouseClick(event) {
        const element = event.target.closest('li');
        const clickedElement = event.target;

        // Check if clicked element or its parent is a delete button
        const deleteButton = clickedElement.closest('a[id^="delete_button"]');
        if (deleteButton) {
            this.deleteAddress(element);
            event.preventDefault();
        } else if (clickedElement.tagName === 'INPUT') {
            this.setAddressAsDefault();
        } else {
            this.setActiveItem(element);
        }
    }

    setAddressAsDefault() {
        for (let i = 0; i < this.itemList.length; i++) {
            if (this.itemList[i].id) {
                const inputs = this.itemList[i].querySelectorAll('input');
                let isActive = false;
                for (let j = 0; j < inputs.length; j++) {
                    if (inputs[j].type === 'radio' && inputs[j].checked && this.itemList.length > 1) {
                        isActive = true;
                        break;
                    }
                }
                this.toggleDeleteButton(this.itemList[i], !isActive);
            }
        }
    }

    toggleDeleteButton(item, flag) {
        const removeButtons = item.querySelectorAll('.btn-remove-address');
        const formDeleteButtons = item.formBlock?.querySelectorAll('.delete-address') || [];

        removeButtons.forEach(btn => btn.style.display = flag ? '' : 'none');
        formDeleteButtons.forEach(btn => btn.style.display = flag ? '' : 'none');
    }

    setActiveItem(item) {
        if (this.activeItem) {
            this.activeItem.classList.remove('on');
            const activeFormId = 'form_' + this.activeItem.id;
            const activeForm = document.getElementById(activeFormId);
            if (activeForm) {
                activeForm.style.display = 'none';
            }
        }

        if (item) {
            item.classList.add('on');
            const formId = 'form_' + item.id;
            const form = document.getElementById(formId);
            if (form) {
                form.changeRelation = item;
                form.addressItem = item;
                form.style.display = 'block';
                this.addFieldChangeObserver(form);

                const itemIdSuffix = item.id.replace(/address_item_/, '').replace(new RegExp(this.baseItemId), '');
                const regionIdElement = document.getElementById('_item' + itemIdSuffix + 'region_id');
                const regionElement = document.getElementById('_item' + itemIdSuffix + 'region');
                this.countryEl = document.getElementById('_item' + itemIdSuffix + 'country_id');

                if (regionIdElement && regionElement) {
                    const actualId = regionIdElement.tagName.toLowerCase() === 'select' ? regionIdElement.id : regionElement.id;
                    this._checkRegionRequired([regionIdElement, regionElement], actualId);
                }
            }
        }

        this.activeItem = item;
    }

    getFormContainerFields(container) {
        return container.querySelectorAll('input, select, textarea');
    }

    addFieldChangeObserver(container) {
        const fields = this.getFormContainerFields(container);
        for (let i = 0; i < fields.length; i++) {
            fields[i].addEventListener('change', this.syncFormData.bind(this));
        }
    }

    syncFormData(event) {
        let container = null;
        let element = event.target || event;

        // Find the container with addressItem property
        let currentEl = element;
        while (currentEl && currentEl.tagName !== 'BODY') {
            if (currentEl.addressItem) {
                container = currentEl;
                break;
            }
            currentEl = currentEl.parentNode;
        }

        if (container) {
            const data = {};
            const fields = this.getFormContainerFields(container);

            for (let i = 0; i < fields.length; i++) {
                const field = fields[i];
                if (field.id) {
                    let id = field.id.replace(/^(_item)?[0-9]+/, '').replace(/^(id)?[0-9]+/, '');
                    let value = field.value;
                    const tagName = field.tagName.toLowerCase();

                    if (tagName === 'select') {
                        if (field.multiple) {
                            const values = [];
                            for (let j = 0; j < field.options.length; j++) {
                                const option = field.options[j];
                                if (option.selected) {
                                    values.push(this.escapeHtml(option.text));
                                }
                            }
                            data[id] = values.join(', ');
                        } else {
                            const option = field.options[field.selectedIndex];
                            const text = option && (option.value === '0' || option.value === '') ? '' : (option ? option.text : '');
                            data[id] = this.escapeHtml(text);
                        }
                    } else if (value !== null) {
                        data[id] = this.escapeHtml(value);
                    }
                }
            }

            // Set name of state to 'region' if list of states are in 'region_id' selectbox
            if (!data['region'] && data['region_id']) {
                data['region'] = data['region_id'];
                delete data['region_id'];
            }

            // Set data to html
            const addressElement = container.addressItem.querySelector('address');
            if (addressElement) {
                let html = this.evaluateTemplate(this.itemContentTemplate, data);
                html = html.replace(/(<br\s*\/?\s*>){2,}/gi, '<br/>');
                html = html.replace(/<br\s*\/?\s*>(\s*,){1,}\s*<br\s*\/?\s*>/gi, '<br/>');
                html = html.replace(/<br\s*\/?\s*>(\s*,){1,}(.*)<br\s*\/?\s*>/gi, '<br/>$2<br/>');
                html = html.replace(/<br\s*\/?\s*>(.*?)(,\s*){1,}<br\s*\/?\s*>/gi, '<br/>$1<br/>');
                html = html.replace(/<br\s*\/?\s*>(.*?)(,\s*){2,}(.*?)<br\s*\/?\s*>/gi, '<br/>$1, $3<br/>');
                html = html.replace(/t:\s*<br\s*\/?\s*>/gi, '');
                html = html.replace(/f:\s*<br\s*\/?\s*>/gi, '');
                html = html.replace(/vat:\s*$/gi, '');
                addressElement.innerHTML = html;
            }
        }
    }

    evaluateTemplate(template, data) {
        return template.replace(/#\{(\w+)\}/g, (match, key) => data[key] || '');
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    deleteAddress(item) {
        if (confirm('<?= $this->jsQuoteEscape(Mage::helper('customer')->__('Are you sure you want to delete this address?')) ?>')) {
            const deletedInput = document.getElementById('deleted_' + item.id);
            if (!item.isNewAddress && deletedInput) {
                deletedInput.value = '1';
                if (item.formBlock) {
                    item.formBlock.classList.add('ignore-validation');
                }
            }

            if (this.activeItem === item && item !== this.itemList[0]) {
                this.setActiveItem(this.itemList[0]);
            }
            if (item === this.itemList[0] && this.itemList[1]) {
                this.setActiveItem(this.itemList[1]);
            }

            if (item.formBlock) {
                this.formContainer.removeChild(item.formBlock);
            }
            this.itemContainer.removeChild(item);
            this.reloadItemList();
            this.setAddressAsDefault();
        }
    }

    cancelAdd(button) {
        if (confirm('<?= $this->jsQuoteEscape(Mage::helper('customer')->__('Are you sure you want to cancel adding of this address?')) ?>')) {
            const itemId = this.baseItemId + button.id.replace(/[a-z_]*/, '');
            const item = document.getElementById(itemId);

            if (item?.isNewAddress && this.activeItem === item && item.formBlock) {
                this.formContainer.removeChild(item.formBlock);
            }

            if (this.activeItem === item && item !== this.itemList[0]) {
                this.setActiveItem(this.itemList[0]);
            }
            if (item === this.itemList[0] && this.itemList[1]) {
                this.setActiveItem(this.itemList[1]);
            }

            if (item) {
                this.itemContainer.removeChild(item);
            }

            this.reloadItemList();
            this.setAddressAsDefault();
        }
    }

    bindCountryRegionRelation(parentId) {
        let countryElements;
        if (parentId) {
            const parent = document.getElementById(parentId);
            countryElements = parent ? parent.querySelectorAll('.countries') : [];
        } else {
            countryElements = document.querySelectorAll('.countries');
        }

        countryElements.forEach(countryElement => {
            if (!countryElement.bindRegions || !countryElement.parentBindId || countryElement.parentBindId !== parentId) {
                countryElement.addEventListener('change', this.reloadRegionField.bind(this));
                countryElement.bindRegions = true;
                countryElement.parentBindId = parentId;
            }
        });
    }

    async reloadRegionField(event) {
        const countryElement = event.target;
        if (countryElement.id) {
            const regionElementId = countryElement.id.replace(/country_id/, 'region');
            const regionElement = document.getElementById(regionElementId);
            if (regionElement) {
                this.regionElement = regionElement;
                this.countryEl = countryElement;

                if (countryElement.value) {
                    const url = this.regionsUrl + 'parent/' + countryElement.value;
                    try {
                        const data = await mahoFetch(url);
                        this.refreshRegionField(data);
                    } catch (error) {
                        console.error('Error loading regions:', error);
                        this.refreshRegionField('[]');
                    }
                } else {
                    // Set empty text field in region
                    this.refreshRegionField('[]');
                }
            }
            // set Zip optional/required
            if (window.varienGlobalEvents) {
                varienGlobalEvents.fireEvent("address_country_changed", countryElement);
            }
        }
    }

    refreshRegionField(serverResponse) {
        if (!serverResponse) return;

        let data;
        try {
            data = JSON.parse(serverResponse);
        } catch (e) {
            try {
                data = eval('(' + serverResponse + ')');
            } catch (e) {
                console.error('Error parsing region data:', e);
                return;
            }
        }

        const row = this.regionElement.parentNode.previousElementSibling;
        const reqLabel = row ? row.querySelectorAll('.required') : [];

        // Set regions and refresh controls
        const regionHtmlName = this.regionElement.name;
        const regionIdHtmlName = regionHtmlName.replace(/region/, 'region_id');
        const regionHtmlId = this.regionElement.id;
        const regionIdHtmlId = regionHtmlId.replace(/region/, 'region_id');
        let newInputId = null;

        let html;
        if (data.length) {
            // Create visible selectbox 'region_id' and hidden 'region'
            html = `<select name="${regionIdHtmlName}" id="${regionIdHtmlId}" class="required-entry select" title="${this.regionElement.title}">`;

            for (let i = 0; i < data.length; i++) {
                if (data[i].label) {
                    html += `<option value="${data[i].value}"`;
                    if (this.regionElement.value &&
                        (this.regionElement.value === data[i].value || this.regionElement.value === data[i].label)) {
                        html += ' selected="selected"';
                    }
                    html += `>${data[i].label}</option>`;
                }
            }
            html += '</select>';
            html += `<input type="hidden" name="${regionHtmlName}" id="${regionHtmlId}"/>`;

            reqLabel.forEach(item => item.style.display = '');
            newInputId = regionIdHtmlId;
        } else {
            // Create visible text input 'region' and hidden 'region_id'
            html = `<input type="text" name="${regionHtmlName}" id="${regionHtmlId}" class="input-text" title="${this.regionElement.title}" />` +
                   `<input type="hidden" name="${regionIdHtmlName}" id="${regionIdHtmlId}"/>`;

            reqLabel.forEach(item => item.style.display = 'none');
            newInputId = regionHtmlId;
        }

        const parentNode = this.regionElement.parentNode;
        parentNode.innerHTML = html;
        this.regionElement = document.getElementById(regionHtmlId);

        // Updating in address info
        const newInput = document.getElementById(newInputId);
        if (newInput) {
            newInput.addEventListener('change', this.syncFormData.bind(this));
            this.syncFormData({ target: newInput });
        }

        const activeElementId = document.getElementById(regionIdHtmlId)?.tagName.toLowerCase() === 'select' ? regionIdHtmlId : regionHtmlId;
        this._checkRegionRequired([document.getElementById(regionHtmlId), document.getElementById(regionIdHtmlId)], activeElementId);
    }

    _checkRegionRequired(elements, activeElementId) {
        const regionRequired = this.requiredStateForCountries.includes(this.countryEl.value);

        elements.forEach(currentElement => {
            if (!currentElement) return;

            if (window.Validation) {
                Validation.reset(currentElement);
            }

            const label = document.querySelector(`label[for="${currentElement.id}"]`);
            if (label) {
                let wildCard = label.querySelector('em') || label.querySelector('span.required');
                if (!wildCard) {
                    label.insertAdjacentHTML('beforeend', ' <span class="required">*</span>');
                    wildCard = label.querySelector('span.required');
                }

                if (!this.showAllRegions) {
                    const tr = label.closest('tr');
                    if (tr) {
                        tr.style.display = regionRequired ? '' : 'none';
                    }
                }

                if (wildCard) {
                    wildCard.style.display = regionRequired ? '' : 'none';
                }
            }

            if (!regionRequired) {
                currentElement.classList.remove('required-entry');
                if (currentElement.tagName.toLowerCase() === 'select') {
                    currentElement.classList.remove('validate-select');
                }
            } else if (activeElementId === currentElement.id) {
                currentElement.classList.add('required-entry');
                if (currentElement.tagName.toLowerCase() === 'select') {
                    currentElement.classList.add('validate-select');
                }
            }
        });
    }
}

const customerAddresses = new addressesModel();
</script>
</td>
</tr>
</table>
