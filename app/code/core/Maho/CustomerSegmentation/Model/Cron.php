<?php

declare(strict_types=1);

/**
 * Maho
 *
 * @category   Maho
 * @package    Maho_CustomerSegmentation
 * @copyright  Copyright (c) 2025 Maho (https://mahocommerce.com)
 * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

class Maho_CustomerSegmentation_Model_Cron
{
    public function refreshSegments(): void
    {
        // Refresh active segments with auto refresh mode that need refreshing (24 hours since last refresh)
        $collection = Mage::getResourceModel('customersegmentation/segment_collection')
            ->addIsActiveFilter()
            ->addAutoRefreshFilter()
            ->addNeedsRefreshFilter(24);

        Mage::log(
            sprintf('Starting segment refresh. Found %d segments to refresh.', $collection->getSize()),
        );

        foreach ($collection as $segment) {
            try {
                $startTime = microtime(true);
                $startMemory = memory_get_usage();

                Mage::log(
                    sprintf('Refreshing segment: %s (ID: %d)', $segment->getName(), $segment->getId()),
                );

                $segment->refreshCustomers();

                $executionTime = microtime(true) - $startTime;
                $memoryUsed = memory_get_usage() - $startMemory;

                Mage::log(sprintf(
                    'Segment %d refreshed successfully. Time: %.2fs, Memory: %.2fMB, Customers: %d',
                    $segment->getId(),
                    $executionTime,
                    $memoryUsed / 1024 / 1024,
                    $segment->getMatchedCustomersCount(),
                ));

            } catch (Exception $e) {
                Mage::log(sprintf(
                    'Error refreshing segment %d: %s',
                    $segment->getId(),
                    $e->getMessage(),
                ), Mage::LOG_ERROR);

                Mage::logException($e);
            }
        }

        Mage::log('Segment refresh completed.');
    }

    /**
     * Process scheduled email sequences
     * Runs every 5 minutes to check for emails ready to send
     */
    public function processScheduledEmails(): void
    {
        if (!Mage::getStoreConfigFlag('customer_segmentation/email_automation/enabled')) {
            return;
        }

        // Dispatch event to trigger email processing
        Mage::dispatchEvent('customer_segmentation_process_scheduled_emails');
    }

    /**
     * Clean up old sequence progress records
     * Runs daily to remove completed records older than configured days
     */
    public function cleanupOldProgress(): void
    {
        if (!Mage::getStoreConfigFlag('customer_segmentation/email_automation/enabled')) {
            return;
        }

        $daysOld = (int) Mage::getStoreConfig('customer_segmentation/email_automation/cleanup_days', 90);

        try {
            $resource = Mage::getResourceSingleton('customersegmentation/sequenceProgress');
            $deleted = $resource->cleanupOldProgress($daysOld);

            if ($deleted > 0) {
                Mage::log(
                    "Cleaned up {$deleted} old sequence progress records (older than {$daysOld} days)",
                    Mage::LOG_INFO,
                );
            }
        } catch (Exception $e) {
            Mage::logException($e);
            Mage::log(
                'Failed to cleanup old progress records: ' . $e->getMessage(),
                Mage::LOG_ERROR,
            );
        }
    }

    /**
     * Clean up expired automation coupons
     * Runs daily to remove unused expired coupons generated by automation
     */
    public function cleanupExpiredCoupons(): void
    {
        if (!Mage::getStoreConfigFlag('customer_segmentation/email_automation/enabled')) {
            return;
        }

        $daysOld = (int) Mage::getStoreConfig('customer_segmentation/email_automation/coupon_cleanup_days', 30);

        try {
            $helper = Mage::helper('customersegmentation/coupon');
            $deleted = $helper->cleanupExpiredCoupons($daysOld);

            if ($deleted > 0) {
                Mage::log(
                    "Cleaned up {$deleted} expired automation coupons (older than {$daysOld} days)",
                    Mage::LOG_INFO,
                );
            }
        } catch (Exception $e) {
            Mage::logException($e);
            Mage::log(
                'Failed to cleanup expired coupons: ' . $e->getMessage(),
                Mage::LOG_ERROR,
            );
        }
    }

    /**
     * Generate email automation statistics report
     * Runs daily to log automation performance metrics
     */
    public function generateAutomationReport(): void
    {
        if (!Mage::getStoreConfigFlag('customer_segmentation/email_automation/enabled')) {
            return;
        }

        try {
            $resource = Mage::getResourceSingleton('customersegmentation/sequenceProgress');
            $adapter = $resource->getReadAdapter();

            // Get stats for last 24 hours
            $yesterday = date('Y-m-d H:i:s', strtotime('-24 hours'));

            $select = $adapter->select()
                ->from($resource->getMainTable(), [
                    'scheduled' => new Maho\Db\Expr('SUM(CASE WHEN status = ' . $adapter->quote(Maho_CustomerSegmentation_Model_SequenceProgress::STATUS_SCHEDULED) . ' THEN 1 ELSE 0 END)'),
                    'sent' => new Maho\Db\Expr('SUM(CASE WHEN status = ' . $adapter->quote(Maho_CustomerSegmentation_Model_SequenceProgress::STATUS_SENT) . ' AND sent_at >= ' . $adapter->quote($yesterday) . ' THEN 1 ELSE 0 END)'),
                    'failed' => new Maho\Db\Expr('SUM(CASE WHEN status = ' . $adapter->quote(Maho_CustomerSegmentation_Model_SequenceProgress::STATUS_FAILED) . ' AND created_at >= ' . $adapter->quote($yesterday) . ' THEN 1 ELSE 0 END)'),
                    'total_active' => 'COUNT(*)',
                ])
                ->where('created_at >= ?', $yesterday);

            $stats = $adapter->fetchRow($select);

            if ($stats && ($stats['sent'] > 0 || $stats['failed'] > 0)) {
                Mage::log(
                    "Daily automation report: {$stats['sent']} sent, {$stats['failed']} failed, " .
                    "{$stats['scheduled']} scheduled, {$stats['total_active']} total active",
                    Mage::LOG_INFO,
                );
            }

        } catch (Exception $e) {
            Mage::logException($e);
            Mage::log(
                'Failed to generate automation report: ' . $e->getMessage(),
                Mage::LOG_ERROR,
            );
        }
    }

}
