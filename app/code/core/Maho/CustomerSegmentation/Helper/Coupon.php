<?php

declare(strict_types=1);

/**
 * Maho
 *
 * @category   Maho
 * @package    Maho_CustomerSegmentation
 * @copyright  Copyright (c) 2025 Maho (https://mahocommerce.com)
 * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Coupon Generation Helper
 *
 * Handles dynamic coupon generation for email sequences
 */
class Maho_CustomerSegmentation_Helper_Coupon extends Mage_Core_Helper_Abstract
{
    /**
     * Generate unique coupon for customer
     */
    public function generateCustomerCoupon(
        int $customerId,
        int $ruleId,
        string $prefix = 'AUTO',
        int $expireDays = 30,
    ): ?string {
        $rule = Mage::getModel('salesrule/rule')->load($ruleId);
        if (!$rule->getId() || !$rule->getIsActive()) {
            Mage::log("Invalid or inactive sales rule: {$ruleId}", Mage::LOG_WARNING, 'customer_segmentation.log');
            return null;
        }

        try {
            // Generate unique coupon code
            $couponCode = $this->generateUniqueCouponCode($prefix, $customerId);

            // Calculate expiration date
            $expirationDate = null;
            if ($expireDays > 0) {
                $expirationDate = new DateTime("+{$expireDays} days");
            }

            // Create coupon
            $coupon = Mage::getModel('salesrule/coupon');
            $coupon->setRuleId($ruleId)
                   ->setCode($couponCode)
                   ->setUsageLimit(1)
                   ->setUsagePerCustomer(1)
                   ->setCreatedAt(Mage::getSingleton('core/date')->gmtDate())
                   ->setType(Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED);

            if ($expirationDate) {
                $coupon->setExpirationDate($expirationDate);
            }

            $coupon->save();

            Mage::log(
                "Generated coupon {$couponCode} for customer {$customerId} using rule {$ruleId}",
                Mage::LOG_INFO,
                'customer_segmentation.log',
            );

            return $couponCode;

        } catch (Exception $e) {
            Mage::logException($e);
            return null;
        }
    }

    /**
     * Generate unique coupon code
     */
    protected function generateUniqueCouponCode(string $prefix, int $customerId): string
    {
        $timestamp = time();
        $hash = substr(md5($customerId . $timestamp . uniqid()), 0, 6);
        $code = strtoupper($prefix . $customerId . $hash);

        // Ensure uniqueness by checking database
        $attempts = 0;
        while ($this->couponCodeExists($code) && $attempts < 10) {
            $hash = substr(md5($customerId . $timestamp . uniqid() . $attempts), 0, 6);
            $code = strtoupper($prefix . $customerId . $hash);
            $attempts++;
        }

        if ($attempts >= 10) {
            throw new Exception('Unable to generate unique coupon code after 10 attempts');
        }

        return $code;
    }

    /**
     * Check if coupon code already exists
     */
    protected function couponCodeExists(string $code): bool
    {
        $coupon = Mage::getModel('salesrule/coupon')->loadByCode($code);
        return $coupon->getId() !== null;
    }

    /**
     * Get template variables for coupon
     */
    public function getCouponTemplateVariables(
        string $couponCode,
        ?string $expirationDate = null,
        ?Mage_SalesRule_Model_Rule $rule = null,
    ): array {
        $variables = [
            'coupon_code' => $couponCode,
        ];

        if ($expirationDate) {
            $variables['coupon_expires_date'] = $expirationDate;
            $variables['coupon_expires_formatted'] = Mage::helper('core')->formatDate($expirationDate, 'medium');
        }

        if ($rule) {
            $variables['coupon_discount_amount'] = $rule->getDiscountAmount();
            $variables['coupon_description'] = $rule->getDescription();

            if ($rule->getSimpleAction() === 'by_percent') {
                $variables['coupon_discount_text'] = $rule->getDiscountAmount() . '% off';
            } elseif ($rule->getSimpleAction() === 'by_fixed') {
                $variables['coupon_discount_text'] = Mage::helper('core')->currency($rule->getDiscountAmount()) . ' off';
            } elseif ($rule->getSimpleAction() === 'cart_fixed') {
                $variables['coupon_discount_text'] = Mage::helper('core')->currency($rule->getDiscountAmount()) . ' off your order';
            } else {
                $variables['coupon_discount_text'] = $rule->getDescription();
            }
        }

        return $variables;
    }

    /**
     * Validate sales rule for coupon generation
     */
    public function validateSalesRule(int $ruleId): array
    {
        $errors = [];

        $rule = Mage::getModel('salesrule/rule')->load($ruleId);
        if (!$rule->getId()) {
            $errors[] = $this->__('Sales rule does not exist.');
            return $errors;
        }

        if (!$rule->getIsActive()) {
            $errors[] = $this->__('Sales rule is not active.');
        }

        if ($rule->getCouponType() !== Mage_SalesRule_Model_Rule::COUPON_TYPE_SPECIFIC) {
            $errors[] = $this->__('Sales rule must be configured for specific coupon codes.');
        }

        if (!$rule->getUseAutoGeneration()) {
            $errors[] = $this->__('Sales rule must have auto-generation enabled.');
        }

        // Check if rule has conditions that might conflict with automation
        if ($rule->getConditionsSerialized()) {
            $conditions = unserialize($rule->getConditionsSerialized());
            if (is_array($conditions) && !empty($conditions)) {
                // Rule has conditions - this might be intended, so just warn
                Mage::log(
                    "Sales rule {$ruleId} has conditions that may affect coupon usage",
                    Mage::LOG_INFO,
                    'customer_segmentation.log',
                );
            }
        }

        return $errors;
    }

    /**
     * Get available sales rules for coupon generation
     */
    public function getAvailableSalesRules(): array
    {
        $collection = Mage::getResourceModel('salesrule/rule_collection')
            ->addFieldToFilter('is_active', 1)
            ->addFieldToFilter('coupon_type', Mage_SalesRule_Model_Rule::COUPON_TYPE_SPECIFIC)
            ->addFieldToFilter('use_auto_generation', 1);

        $options = [
            ['value' => '', 'label' => $this->__('-- Please Select --')],
        ];

        foreach ($collection as $rule) {
            $label = $rule->getName();
            if ($rule->getDescription()) {
                $label .= ' (' . $rule->getDescription() . ')';
            }

            $options[] = [
                'value' => $rule->getId(),
                'label' => $label,
            ];
        }

        return $options;
    }

    /**
     * Get coupon usage statistics
     */
    public function getCouponStats(string $couponCode): array
    {
        $coupon = Mage::getModel('salesrule/coupon')->loadByCode($couponCode);
        if (!$coupon->getId()) {
            return [];
        }

        return [
            'code' => $couponCode,
            'rule_id' => $coupon->getRuleId(),
            'usage_limit' => $coupon->getUsageLimit(),
            'usage_per_customer' => $coupon->getUsagePerCustomer(),
            'times_used' => $coupon->getTimesUsed(),
            'expiration_date' => $coupon->getExpirationDate(),
            'created_at' => $coupon->getCreatedAt(),
            'is_expired' => $this->isCouponExpired($coupon),
            'is_used_up' => $this->isCouponUsedUp($coupon),
        ];
    }

    /**
     * Check if coupon is expired
     */
    public function isCouponExpired(Mage_SalesRule_Model_Coupon $coupon): bool
    {
        $expirationDate = $coupon->getExpirationDate();
        if (!$expirationDate) {
            return false;
        }

        return $expirationDate->getTimestamp() < time();
    }

    /**
     * Check if coupon usage limit is reached
     */
    public function isCouponUsedUp(Mage_SalesRule_Model_Coupon $coupon): bool
    {
        $usageLimit = $coupon->getUsageLimit();
        if (!$usageLimit) {
            return false;
        }

        return $coupon->getTimesUsed() >= $usageLimit;
    }

    /**
     * Clean up expired coupons generated by automation
     */
    public function cleanupExpiredCoupons(int $daysOld = 30): int
    {
        $cutoffDate = date('Y-m-d', strtotime("-{$daysOld} days"));

        $collection = Mage::getResourceModel('salesrule/coupon_collection')
            ->addFieldToFilter('type', Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED)
            ->addFieldToFilter('expiration_date', ['lt' => $cutoffDate])
            ->addFieldToFilter('times_used', 0); // Only delete unused coupons

        $count = 0;
        foreach ($collection as $coupon) {
            try {
                $coupon->delete();
                $count++;
            } catch (Exception $e) {
                Mage::logException($e);
            }
        }

        if ($count > 0) {
            Mage::log(
                "Cleaned up {$count} expired automation coupons",
                Mage::LOG_INFO,
                'customer_segmentation.log',
            );
        }

        return $count;
    }
}
